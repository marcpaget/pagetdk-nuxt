import { Ref } from 'vue';
export type Locale = 'ar' | 'az' | 'cs' | 'da' | 'de' | 'en' | 'es' | 'fi' | 'fr' | 'hr' | 'hu' | 'it' | 'ja' | 'ko' | 'lt' | 'nl' | 'no' | 'oc' | 'pt' | 'pl' | 'ru' | 'sk' | 'sv' | 'tr' | 'uk';
export type PartialRecord<K extends keyof any, T> = Partial<Record<K, T>>;
export type Translatable = string | PartialRecord<Locale, string>;
export declare enum CookieType {
    NECESSARY = "necessary",
    OPTIONAL = "optional"
}
export interface Cookie {
    description?: Translatable;
    id?: string;
    name: Translatable;
    links?: Record<string, string | null>;
    src?: string;
    targetCookieIds?: string[];
}
export interface LocaleStrings {
    accept: string;
    acceptAll: string;
    bannerDescription: string;
    bannerTitle: string;
    close: string;
    cookiesFunctional: string;
    cookiesNecessary: string;
    cookiesOptional: string;
    iframeBlocked: string;
    decline: string;
    declineAll: string;
    here: string;
    manageCookies: string;
    save: string;
    settingsUnsaved: string;
}
export interface ModuleOptions {
    barPosition: 'top-left' | 'top-right' | 'top-full' | 'bottom-left' | 'bottom-right' | 'bottom-full';
    closeModalOnClickOutside: boolean;
    colors: false | Record<string, any>;
    cookieExpiryOffsetMs: number;
    cookieNameCookiesEnabledIds: string;
    cookieNameIsConsentGiven: string;
    cookies: {
        necessary: Cookie[];
        optional: Cookie[];
    };
    domain: string;
    isAcceptNecessaryButtonEnabled: boolean;
    isControlButtonEnabled: boolean;
    isCookieIdVisible: boolean;
    isCssEnabled: boolean;
    isCssPonyfillEnabled: boolean;
    isDashInDescriptionEnabled: boolean;
    isIframeBlocked: boolean | {
        initialState: boolean;
    };
    isModalForced: boolean;
    locales: Locale[];
    localeTexts: PartialRecord<Locale, Partial<LocaleStrings>>;
}
export declare const DEFAULTS: Required<ModuleOptions>;
export interface State {
    cookiesEnabled: Ref<Cookie[] | undefined>;
    cookiesEnabledIds: Ref<string[] | undefined>;
    isConsentGiven: Ref<boolean | undefined>;
    isModalActive: Ref<boolean>;
    moduleOptions: ModuleOptions;
}
