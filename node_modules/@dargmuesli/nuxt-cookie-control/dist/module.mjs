import { resolve } from 'node:path';
import { pathToFileURL } from 'node:url';
import { createResolver, defineNuxtModule, addPlugin, addImports, addTemplate, extendWebpackConfig, resolvePath } from '@nuxt/kit';

const name = "@dargmuesli/nuxt-cookie-control";
const version = "5.7.0";

const en = {
  accept: "Accept",
  acceptAll: "Accept all",
  bannerDescription: "We use our own cookies and third-party cookies so that we can display this website correctly and better understand how this website is used, with a view to improving the services we offer. A decision on cookie usage permissions can be changed anytime using the cookie button that will appear after a selection has been made on this banner.",
  bannerTitle: "Cookies",
  close: "Close",
  cookiesFunctional: "Functional cookies",
  cookiesNecessary: "Necessary cookies",
  cookiesOptional: "Optional cookies",
  decline: "Decline",
  declineAll: "Decline all",
  here: "here",
  iframeBlocked: "To see this, please enable functional cookies",
  manageCookies: "Learn more and customize",
  save: "Save",
  settingsUnsaved: "You have unsaved settings"
};

const DEFAULTS = {
  barPosition: "bottom-full",
  closeModalOnClickOutside: false,
  colors: {
    barBackground: "#000",
    barButtonBackground: "#fff",
    barButtonColor: "#000",
    barButtonHoverBackground: "#333",
    barButtonHoverColor: "#fff",
    barTextColor: "#fff",
    checkboxActiveBackground: "#000",
    checkboxActiveCircleBackground: "#fff",
    checkboxDisabledBackground: "#ddd",
    checkboxDisabledCircleBackground: "#fff",
    checkboxInactiveBackground: "#000",
    checkboxInactiveCircleBackground: "#fff",
    controlButtonBackground: "#fff",
    controlButtonHoverBackground: "#000",
    controlButtonIconColor: "#000",
    controlButtonIconHoverColor: "#fff",
    focusRingColor: "#808080",
    modalBackground: "#fff",
    modalButtonBackground: "#000",
    modalButtonColor: "#fff",
    modalButtonHoverBackground: "#333",
    modalButtonHoverColor: "#fff",
    modalOverlay: "#000",
    modalOverlayOpacity: 0.8,
    modalTextColor: "#000",
    modalUnsavedColor: "#fff"
  },
  cookies: {
    necessary: [],
    optional: []
  },
  cookieExpiryOffsetMs: 1e3 * 60 * 60 * 24 * 365,
  // one year
  cookieNameIsConsentGiven: "ncc_c",
  cookieNameCookiesEnabledIds: "ncc_e",
  isAcceptNecessaryButtonEnabled: true,
  isControlButtonEnabled: true,
  isCookieIdVisible: false,
  isCssEnabled: true,
  isCssPonyfillEnabled: false,
  isDashInDescriptionEnabled: true,
  isIframeBlocked: false,
  isModalForced: false,
  domain: "",
  locales: ["en"],
  localeTexts: { en }
};

const resolver = createResolver(import.meta.url);
const runtimeDir = resolver.resolve("./runtime");
const module = defineNuxtModule({
  meta: {
    name,
    version,
    configKey: "cookieControl",
    compatibility: { nuxt: "^3.0.0" }
  },
  defaults: DEFAULTS,
  hooks: {
    "components:dirs"(dirs) {
      dirs.push({
        path: resolver.resolve(runtimeDir, "components"),
        prefix: "cookie"
      });
    }
  },
  async setup(moduleOptions, nuxt) {
    nuxt.options.alias["#cookie-control/set-vars"] = moduleOptions.isCssPonyfillEnabled ? resolver.resolve(runtimeDir, "set-vars/ponyfill") : resolver.resolve(runtimeDir, "set-vars/native");
    nuxt.options.alias["#cookie-control"] = runtimeDir;
    nuxt.options.build.transpile.push(runtimeDir);
    pushCss(moduleOptions, nuxt);
    blockIframes(moduleOptions);
    await loadLocales(moduleOptions);
    addPlugin(resolver.resolve(runtimeDir, "plugin"));
    addImports({
      name: "useCookieControl",
      as: "useCookieControl",
      from: resolver.resolve(runtimeDir, "composables")
    });
    addTemplate({
      filename: "cookie-control-options.ts",
      write: true,
      getContents: () => `import { ModuleOptions } from '../../src/runtime/types'

export default ${JSON.stringify(
        moduleOptions,
        void 0,
        2
      )} as ModuleOptions`
    });
  }
});
const blockIframes = (moduleOptions) => {
  if (moduleOptions.isIframeBlocked) {
    const isIframeBlocked = {
      name: "functional",
      initialState: typeof moduleOptions.isIframeBlocked !== "boolean" && moduleOptions.isIframeBlocked.initialState !== void 0 ? moduleOptions.isIframeBlocked.initialState : true
    };
    if (moduleOptions.cookies) {
      if (moduleOptions.cookies.optional) {
        moduleOptions.cookies.optional.push(isIframeBlocked);
      } else {
        moduleOptions.cookies.optional = [isIframeBlocked];
      }
    }
    extendWebpackConfig((config) => {
      config.module?.rules?.push({
        test: /\.vue$/,
        loader: "string-replace-loader",
        exclude: /node_modules/,
        options: {
          multiple: [
            { search: "<iframe", replace: "<CookieIframe", flags: "g" },
            { search: "</iframe>", replace: "</CookieIframe>", flags: "g" }
          ]
        }
      });
    });
  }
};
const loadLocales = async (moduleOptions) => {
  const locales = moduleOptions.locales;
  moduleOptions.locales = [];
  for (const locale of locales) {
    const text = await import(pathToFileURL(await resolvePath(resolve(runtimeDir, "locale", locale))).href).then((r) => r.default || r);
    if (!text)
      throw new Error(`Could not import text for locale ${locale}`);
    moduleOptions.locales.push(locale);
    moduleOptions.localeTexts[locale] = {
      ...text,
      ...moduleOptions.localeTexts[locale]
    };
  }
};
const pushCss = (moduleOptions, nuxt) => {
  if (moduleOptions.isCssEnabled)
    nuxt.options.css.push(resolver.resolve(runtimeDir, "styles.css"));
};

export { module as default };
