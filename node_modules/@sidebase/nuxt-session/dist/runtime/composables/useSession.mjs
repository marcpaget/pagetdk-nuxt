import { useFetch, createError } from "#app";
import { nanoid } from "nanoid";
import { ref } from "vue";
import { useRuntimeConfig } from "#imports";
export default async (options = {
  fetchSessionOnInitialization: true
}) => {
  const session = ref(null);
  const _performSessionRequest = (method, body) => {
    const config = useRuntimeConfig().public.session;
    if (!config.api.isEnabled || !config.api.methods.includes(method)) {
      const message = `Cannot "${method}" session data as endpoint is not enabled. If you want to be able to "${method}" session data, you can configure this via the "session.api.isEnabled: boolean" and "session.api.methods: ('post' | 'get' | ...)[]" module configuration options.`;
      throw createError({ message, statusCode: 500 });
    }
    return useFetch(config.api.basePath, {
      method: method.toUpperCase(),
      body,
      server: false,
      key: nanoid(),
      onResponse({ response }) {
        const data = response._data;
        session.value = data;
        return data;
      }
    });
  };
  const refresh = () => _performSessionRequest("get");
  const remove = () => _performSessionRequest("delete");
  const update = (payload) => _performSessionRequest("patch", payload);
  const overwrite = (payload) => _performSessionRequest("post", payload);
  const reset = async () => {
    await remove();
    return refresh();
  };
  if (options.fetchSessionOnInitialization) {
    await refresh();
  }
  return {
    session,
    reset,
    overwrite,
    update,
    remove,
    refresh
  };
};
