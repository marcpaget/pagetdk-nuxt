import { defineNuxtModule, useLogger, createResolver, addServerHandler, addImportsDir } from '@nuxt/kit';
import { defu } from 'defu';
import { builtinDrivers } from 'unstorage';

const PACKAGE_NAME = "nuxt-session";
const defaults = {
  isEnabled: true,
  session: {
    expiryInSeconds: 60 * 10,
    idLength: 64,
    storePrefix: "sessions",
    cookieSameSite: "lax",
    cookieSecure: true,
    cookieHttpOnly: true,
    storageOptions: {
      driver: "memory",
      options: {}
    },
    domain: false,
    ipPinning: false,
    rolling: false
  },
  api: {
    isEnabled: true,
    methods: [],
    basePath: "/api/session"
  }
};
const module = defineNuxtModule({
  meta: {
    name: `@sidebase/${PACKAGE_NAME}`,
    configKey: "session",
    compatibility: {
      bridge: false
    }
  },
  defaults,
  hooks: {},
  setup(moduleOptions, nuxt) {
    const logger = useLogger(PACKAGE_NAME);
    if (!moduleOptions.isEnabled) {
      logger.info(`Skipping ${PACKAGE_NAME} setup, as module is disabled`);
      return;
    }
    logger.info("Setting up sessions...");
    const options = defu(moduleOptions, defaults);
    if (moduleOptions.api.methods && moduleOptions.api.methods.length > 0) {
      options.api.methods = moduleOptions.api.methods;
    } else {
      options.api.methods = ["patch", "delete", "get", "post"];
    }
    nuxt.options.runtimeConfig.session = defu(nuxt.options.runtimeConfig.session, options);
    const publicConfig = { session: { api: options.api } };
    nuxt.options.runtimeConfig.public = defu(nuxt.options.runtimeConfig.public, publicConfig);
    nuxt.options.nitro.virtual = defu(nuxt.options.nitro.virtual, {
      "#session-driver": `export { default } from '${builtinDrivers[options.session.storageOptions.driver]}'`
    });
    const { resolve } = createResolver(import.meta.url);
    const handler = resolve("./runtime/server/middleware/session");
    const serverHandler = {
      middleware: true,
      handler
    };
    nuxt.options.serverHandlers.unshift(serverHandler);
    if (options.api.isEnabled) {
      for (const apiMethod of options.api.methods) {
        const handler2 = resolve(`./runtime/server/api/session.${apiMethod}`);
        addServerHandler({ handler: handler2, route: options.api.basePath });
      }
      logger.info(`Session API "${options.api.methods.join(", ")}" endpoints registered at "${options.api.basePath}"`);
    } else {
      logger.info("Session API disabled");
    }
    const composables = resolve("./runtime/composables");
    addImportsDir(composables);
    logger.success("Session setup complete");
  }
});

export { module as default };
