import { withBase } from "ufo";
import { useRequestEvent } from "#app";
import { useRouter, useServerHead } from "#imports";
import { defaults, forcePrerender, host, satoriProvider } from "#nuxt-og-image/config";
export function defineOgImageScreenshot(options = {}) {
  const router = useRouter();
  const route = router?.currentRoute?.value?.path || "";
  defineOgImage({
    alt: `Web page screenshot${route ? ` of ${route}` : ""}.`,
    provider: "browser",
    component: null,
    static: true,
    ...options
  });
}
export function defineOgImageDynamic(options = {}) {
  defineOgImage({
    provider: satoriProvider ? "satori" : "browser",
    static: !!forcePrerender,
    ...options
  });
}
export function defineOgImageStatic(options = {}) {
  defineOgImage({
    provider: satoriProvider ? "satori" : "browser",
    static: true,
    ...options
  });
}
export function defineOgImage(options = {}) {
  if (process.server) {
    const router = useRouter();
    const route = router?.currentRoute?.value?.path || "";
    const e = useRequestEvent();
    if ((forcePrerender || options.static) && options.provider === "satori")
      e.res.setHeader("x-nitro-prerender", `${route === "/" ? "" : route}/__og_image__/og.png`);
    const meta = [
      {
        name: "twitter:card",
        content: "summary_large_image"
      },
      {
        name: "twitter:image:src",
        content: () => withBase(`${route === "/" ? "" : route}/__og_image__/og.png`, host)
      },
      {
        property: "og:image",
        content: () => withBase(`${route === "/" ? "" : route}/__og_image__/og.png`, host)
      },
      {
        property: "og:image:width",
        content: options.width || defaults.width
      },
      {
        property: "og:image:height",
        content: options.height || defaults.height
      }
    ];
    if (options.alt) {
      meta.push({
        property: "og:image:alt",
        content: options.alt
      });
    }
    useServerHead({
      meta,
      script: [
        {
          id: "nuxt-og-image-options",
          type: "application/json",
          innerHTML: () => {
            const payload = {
              title: "%s"
            };
            Object.entries(options).forEach(([key, val]) => {
              payload[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = val;
            });
            return payload;
          }
        }
      ]
    });
  }
}
