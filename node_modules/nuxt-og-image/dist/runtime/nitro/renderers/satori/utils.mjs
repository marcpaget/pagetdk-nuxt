import { base64ToArrayBuffer, readPublicAsset } from "../../utils.mjs";
import { useStorage } from "#internal/nitro";
const cachedFonts = {};
export async function loadFont(font) {
  if (cachedFonts[font])
    return cachedFonts[font];
  let data;
  const storageKey = `assets:nuxt-og-imagee:font:${font}`;
  if (await useStorage().hasItem(storageKey)) {
    data = base64ToArrayBuffer(await useStorage().getItem(storageKey));
    return cachedFonts[font] = { name: font, data, style: "normal" };
  }
  const [name, weight] = font.split(":");
  if (name === "Inter" && ["400", "700"].includes(weight)) {
    const data2 = await readPublicAsset(`/inter-latin-ext-${weight}-normal.woff`);
    if (data2)
      return cachedFonts[font] = { name, weight: Number(weight), data: data2, style: "normal" };
  }
  if (!data) {
    const fontUrl = await globalThis.$fetch("/api/og-image-font", {
      query: { name, weight }
    });
    data = await globalThis.$fetch(fontUrl, {
      responseType: "arrayBuffer"
    });
  }
  await useStorage().setItem(storageKey, Buffer.from(data).toString("base64"));
  return cachedFonts[font] = { name, weight: Number(weight), data, style: "normal" };
}
export async function walkSatoriTree(url, node, plugins) {
  if (!node.props?.children)
    return;
  if (Array.isArray(node.props.children) && node.props.children.length === 0) {
    delete node.props.children;
    return;
  }
  for (const child of node.props.children || []) {
    if (child) {
      for (const plugin of plugins) {
        if (plugin.filter(child))
          await plugin.transform(child);
      }
      await walkSatoriTree(url, child, plugins);
    }
  }
}
export function defineSatoriTransformer(transformer) {
  return transformer;
}
