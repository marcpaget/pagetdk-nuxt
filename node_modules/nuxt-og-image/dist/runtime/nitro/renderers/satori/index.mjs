import { html as convertHtmlToSatori } from "satori-html";
import { parseURL } from "ufo";
import twemoji from "twemoji";
import { loadFont, walkSatoriTree } from "./utils.mjs";
import imageSrc from "./plugins/imageSrc.mjs";
import twClasses from "./plugins/twClasses.mjs";
import flex from "./plugins/flex.mjs";
import emojis from "./plugins/emojis.mjs";
import encoding from "./plugins/encoding.mjs";
import { fonts, satoriOptions } from "#nuxt-og-image/config";
import loadSvg2png from "#nuxt-og-image/svg2png";
import loadSatori from "#nuxt-og-image/satori";
const satoriFonts = [];
let fontLoadPromise = null;
function loadFonts(fonts2) {
  if (fontLoadPromise)
    return fontLoadPromise;
  return fontLoadPromise = Promise.all(fonts2.map((font) => loadFont(font)));
}
export default {
  name: "satori",
  createPng: async function createPng(baseUrl, options) {
    const svg = await this.createSvg(baseUrl, options);
    const svg2png = await loadSvg2png();
    return svg2png(svg, { baseUrl, ...options });
  },
  createVNode: async function createVNode(baseUrl, options) {
    const url = parseURL(baseUrl);
    const html = await globalThis.$fetch("/api/og-image-html", {
      query: { path: url.pathname, options: JSON.stringify(options) }
    });
    const body = html.match(/<body[^>]*>([\s\S]*)<\/body>/)?.[1];
    const emojiedFont = twemoji.parse(body, {
      folder: "svg",
      ext: ".svg"
    });
    const satoriTree = convertHtmlToSatori(emojiedFont);
    await walkSatoriTree(url, satoriTree, [
      // @todo add user land support
      emojis(url),
      twClasses(url),
      imageSrc(url),
      flex(url),
      encoding(url)
    ]);
    return satoriTree;
  },
  createSvg: async function createSvg(baseUrl, options) {
    const vnodes = await this.createVNode(baseUrl, options);
    if (!satoriFonts.length)
      satoriFonts.push(...await loadFonts(fonts));
    const satori = await loadSatori();
    return await satori(vnodes, {
      ...satoriOptions,
      baseUrl,
      fonts: satoriFonts,
      embedFont: true,
      width: options.width,
      height: options.height
    });
  }
};
