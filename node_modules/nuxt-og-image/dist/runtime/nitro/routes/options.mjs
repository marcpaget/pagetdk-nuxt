import { createError, defineEventHandler, getHeaders, getQuery } from "h3";
import { extractOgImageOptions, useHostname } from "../utils.mjs";
import { getRouteRules } from "#internal/nitro";
import { defaults } from "#nuxt-og-image/config";
export default defineEventHandler(async (e) => {
  const query = getQuery(e);
  const path = query.path || "/";
  const fetchOptions = process.dev || process.env.prerender ? {
    headers: getHeaders(e)
  } : {
    baseURL: useHostname(e)
  };
  const html = await globalThis.$fetch(path, {
    ...fetchOptions
  });
  const extractedPayload = extractOgImageOptions(html);
  if (!extractedPayload) {
    throw createError({
      statusCode: 500,
      statusMessage: `The path ${path} is missing the og-image payload.`
    });
  }
  e.node.req.url = path;
  e.context._nitro.routeRules = void 0;
  const routeRules = getRouteRules(e)?.ogImage;
  e.node.req.url = e.path;
  if (routeRules === false)
    return false;
  return {
    path,
    ...defaults,
    // use route rules
    ...routeRules || {},
    // use provided data
    ...extractedPayload,
    // use query data
    ...query
  };
});
