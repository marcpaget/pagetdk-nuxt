import * as _nuxt_schema from '@nuxt/schema';
import * as vue_demi from 'vue-demi';
import { Ref } from 'vue-demi';

declare function createViewportManager(options: ViewportOptions, state: Ref<string>): {
    breakpoint: vue_demi.WritableComputedRef<string>;
    isGreaterThan: (searchBreakpoint: string) => boolean;
    isGreaterOrEquals: (searchBreakpoint: string) => boolean;
    isLessThan: (searchBreakpoint: string) => boolean;
    match: (breakpointToMatch: string) => boolean;
    matches: (...breakpointsToMatch: string[]) => boolean;
    queries: vue_demi.ComputedRef<Record<string, ViewportQuery>>;
};

/**
 * Viewport manager instance.
 */
declare type ViewportManager = ReturnType<typeof createViewportManager>;
/**
 * Viewport options.
 */
declare type ViewportOptions = {
    /**
     * Breakpoints.
     */
    breakpoints: {
        [key: string]: number;
    };
    /**
     * Cookie name.
     *
     * Default: "viewport".
     */
    cookieName: string;
    /**
     * Default breakpoints based on device type for auto detection.
     *
     * Available devices: "console", "desktop", "embedded", "mobile", "smarttv", "tablet", "wearable".
     */
    defaultBreakpoints: {
        [key: string]: string;
    };
    /**
     * Fallback breakpoint.
     */
    fallbackBreakpoint: string;
};
/**
 * Viewport query.
 */
declare type ViewportQuery = {
    /**
     * CSS media query.
     */
    mediaQuery: string;
    /**
     * Size.
     */
    size: number;
};
declare module 'vue/types/vue' {
    interface Vue {
        $viewport: ViewportManager;
    }
}
declare module '#app' {
    interface NuxtApp extends PluginInjection {
    }
}
interface PluginInjection {
    $viewport: ViewportManager;
}
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties extends PluginInjection {
    }
}

declare type ModuleOptions = ViewportOptions;
declare const _default: _nuxt_schema.NuxtModule<ViewportOptions>;

export { ModuleOptions, _default as default };
