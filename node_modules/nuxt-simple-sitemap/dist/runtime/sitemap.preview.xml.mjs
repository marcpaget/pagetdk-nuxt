import { Readable } from "node:stream";
import { defineEventHandler, setHeader } from "h3";
import { SitemapStream, streamToPromise } from "sitemap";
import { parseURL, withoutBase, withoutTrailingSlash } from "ufo";
import { getRouteRulesForPath } from "#internal/nitro/route-rules";
import { urls as configUrls, defaults } from "#nuxt-simple-sitemap/config";
import * as sitemapConfig from "#nuxt-simple-sitemap/config";
import { useRuntimeConfig } from "#internal/nitro";
export default defineEventHandler(async (e) => {
  const stream = new SitemapStream({ ...sitemapConfig });
  const runtimeConfig = useRuntimeConfig();
  let urls = [...configUrls];
  if (!urls.length)
    urls = [{ url: "/" }];
  urls = urls.map((entry) => {
    const routeRules = getRouteRulesForPath(withoutBase(withoutTrailingSlash(parseURL(entry.url).pathname), runtimeConfig.app.baseURL));
    if (routeRules.index === false)
      return false;
    return { ...entry, ...defaults, ...routeRules.sitemap || {} };
  }).filter(Boolean);
  const sitemapContext = { stream, urls };
  setHeader(e, "Content-Type", "application/xml");
  return streamToPromise(Readable.from(sitemapContext.urls).pipe(sitemapContext.stream)).then((data) => data.toString());
});
