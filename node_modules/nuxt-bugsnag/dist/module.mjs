import { defineNuxtModule, createResolver, addPlugin, addServerPlugin, addImports, extendViteConfig } from '@nuxt/kit';
import { node, browser } from 'bugsnag-source-maps-fork';

const module = defineNuxtModule({
  meta: {
    name: "nuxt-bugsnag",
    configKey: "bugsnag",
    compatibility: {
      nuxt: " ^3.0.0 || ^2.16.0",
      bridge: true
    }
  },
  defaults: {
    disabled: false,
    publishRelease: false,
    disableLog: false,
    baseUrl: "http://localhost:3000",
    config: {
      notifyReleaseStages: [],
      apiKey: "",
      environment: "production",
      appVersion: "1.0.0"
    },
    projectRoot: "/"
  },
  setup(options, nuxt) {
    const { resolve } = createResolver(import.meta.url);
    if (options.disabled) {
      return;
    }
    nuxt.options.runtimeConfig.public.bugsnag = options.config;
    addPlugin(resolve("./runtime/plugin"));
    addServerPlugin(resolve("./runtime/server/plugins/bugsnag"));
    addImports({
      name: "useBugsnag",
      as: "useBugsnag",
      from: resolve("./runtime/composables/useBugsnag")
    });
    extendViteConfig((config) => {
      config.optimizeDeps = config.optimizeDeps || {};
      config.optimizeDeps.include = config.optimizeDeps.include || [];
      config.optimizeDeps.include.push(
        ...["@bugsnag/plugin-vue", "@bugsnag/js"]
      );
    });
    if (!options.publishRelease || nuxt.options.dev) {
      return;
    }
    nuxt.options.sourcemap = { server: true, client: true };
    nuxt.addHooks({
      "nitro:config": (config) => {
        config.imports.imports.push({
          name: "useBugsnag",
          as: "useBugsnag",
          from: resolve("./runtime/server/composables/useBugsnag")
        });
      },
      "nitro:init": (nitro) => {
        nitro.hooks.addHooks({
          compiled: async (nitro2) => {
            const logger = nitro2.logger.create({});
            if (options.disableLog) {
              logger.setReporters([
                {
                  log: () => {
                  }
                }
              ]);
            }
            logger.log("");
            logger.start("upload of sourcemaps to bugsnag \n");
            const promises = [];
            promises.push(
              node.uploadMultiple({
                apiKey: options.config.apiKey,
                appVersion: options.config.appVersion,
                directory: nitro2.options.output.serverDir,
                logger,
                overwrite: true,
                projectRoot: options.projectRoot
              })
            );
            promises.push(
              node.uploadMultiple({
                apiKey: options.config.apiKey,
                appVersion: options.config.appVersion,
                directory: nuxt.options.buildDir,
                logger,
                overwrite: true,
                projectRoot: options.projectRoot
              })
            );
            promises.push(
              browser.uploadMultiple({
                apiKey: options.config.apiKey,
                appVersion: options.config.appVersion,
                directory: nitro2.options.output.publicDir,
                logger,
                overwrite: true,
                baseUrl: options.baseUrl
              })
            );
            await Promise.all(promises);
            logger.log("");
            logger.success("upload of sourcemaps to bugsnag \n");
          }
        });
      }
    });
  }
});

export { module as default };
