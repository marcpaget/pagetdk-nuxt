import { fileURLToPath } from 'node:url';
import { defineNuxtModule, addTemplate, addVitePlugin, addComponent, hasNuxtCompatibility, addImportsSources, addPlugin } from '@nuxt/kit';
import { resolve } from 'pathe';
import fg from 'fast-glob';
import UnheadVite from '@unhead/addons/vite';

const headTypeTemplate = {
  filename: "nuxt-unhead.d.ts",
  getContents: async ({ options }) => {
    const paths = await options.getPaths();
    let output = "// Generated by nuxt-unhead\n";
    output += `
declare module '#app/nuxt' {
  import { HeadEntry, HeadTag } from '@vueuse/head'

  interface RuntimeNuxtHooks {
    'head:tags': (tag: HeadTag[]) => Promise<void> | void
    'head:entries': (entries: HeadEntry[]) => Promise<void> | void
  }
}

type PublicFiles = ${[...paths.public.map((path) => `'/${path}'`), "(string & Record<never, never>)"].join(" | ")}
type AssetFiles = ${[...paths.assets.map((path) => `'~/${path}'`), "(string & Record<never, never>)"].join(" | ")}

declare module '@nuxt/schema' {
  interface HeadAugmentations {
    link: {
      href: PublicFiles | AssetFiles
    }
    script: {
      src: PublicFiles | AssetFiles
    }
  }
}

// ensures we augment
export {}`;
    return output;
  }
};

const module = defineNuxtModule({
  meta: {
    name: "nuxt-unhead",
    configKey: "unhead",
    compatibility: {
      nuxt: "^3.1.0",
      bridge: false
    }
  },
  defaults: {
    seoOptimise: true,
    resolveAliases: false
  },
  async setup(config, nuxt) {
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    nuxt.options.app.head.titleTemplate = nuxt.options.app.head.titleTemplate || "%s %separator %siteName";
    nuxt.options.runtimeConfig.public.titleSeparator = nuxt.options.runtimeConfig.public.titleSeparator || "\u2013";
    config = Object.assign({}, config, nuxt.options.head);
    nuxt.options.runtimeConfig.public["nuxt-unhead"] = config;
    nuxt.options.build.transpile.push("@unhead/vue", "unhead");
    const getPaths = async () => ({
      public: await fg(["**/*"], { cwd: resolve(nuxt.options.srcDir, "public") }),
      assets: await fg(["**/*"], { cwd: resolve(nuxt.options.srcDir, "assets") })
    });
    addTemplate({ ...headTypeTemplate, options: { getPaths } });
    nuxt.hooks.hook("prepare:types", ({ references }) => {
      references.push({ path: resolve(nuxt.options.buildDir, "nuxt-unhead.d.ts") });
    });
    addVitePlugin(UnheadVite());
    await addComponent({
      name: "DebugHead",
      mode: "client",
      filePath: `${runtimeDir}/components/DebugHead.client.vue`
    });
    if (await hasNuxtCompatibility({ nuxt: "< 3.3.0" })) {
      addImportsSources({
        from: "@vueuse/head",
        imports: [
          "useServerHeadSafe",
          "useHeadSafe",
          "useServerHead",
          "injectHead"
        ]
      });
    }
    addPlugin({ src: resolve(runtimeDir, "plugin") });
  }
});

export { module as default };
