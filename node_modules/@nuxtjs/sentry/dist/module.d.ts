import { Configuration } from 'webpack';
import { Options as Options$1, IntegrationClass } from '@sentry/types';
import * as PluggableIntegrations from '@sentry/integrations';
import { Integrations, Replay, BrowserTracing } from '@sentry/vue';
import { Options, TracingOptions } from '@sentry/vue/types/types';
import { SentryCliPluginOptions } from '@sentry/webpack-plugin';
import * as SentryNode from '@sentry/node';
import { NodeOptions, Handlers, Integrations as Integrations$1 } from '@sentry/node';
import * as SentryTypes from '@sentry/core';

type IntegrationsConfig<T extends Record<keyof T, IntegrationClass<unknown>>> = Partial<{
    [K in keyof T]: ConstructorParameters<T[K]>[0] | Record<string, never> | false
}>

// A replacement type since we don't want to depend on `@sentry/profiling-node`
type ProfilingIntegration = { ProfilingIntegration?: Record<string, never> | false }

type ClientIntegrations = IntegrationsConfig<typeof Integrations & typeof PluggableIntegrations & { Replay: typeof Replay }>
type ServerIntegrations = IntegrationsConfig<typeof Integrations$1 & typeof PluggableIntegrations> & ProfilingIntegration

interface LazyConfiguration {
    chunkName?: string
    injectLoadHook?: boolean
    injectMock?: boolean
    mockApiMethods?: boolean | string[]
    webpackPrefetch?: boolean
    webpackPreload?: boolean
}

interface TracingConfiguration extends Pick<Options$1, 'tracesSampleRate'> {
    browserTracing?: Partial<BrowserTracing['options']>
    vueOptions?: Partial<TracingOptions>
}

interface ModuleConfiguration {
  clientConfig: Partial<Options> | string
  clientIntegrations: ClientIntegrations
  config: Options$1
  customClientIntegrations: string
  customServerIntegrations: string
  disableClientRelease: boolean
  disableClientSide: boolean
  disabled: boolean
  disableServerRelease: boolean
  disableServerSide: boolean
  dsn: string
  tracing: boolean | TracingConfiguration
  initialize: boolean
  lazy: boolean | LazyConfiguration
  logMockCalls: boolean
  /** See available options at https://github.com/getsentry/sentry-webpack-plugin */
  publishRelease: boolean | Partial<SentryCliPluginOptions>
  runtimeConfigKey: string
  serverConfig: NodeOptions | string
  serverIntegrations: ServerIntegrations
  sourceMapStyle: Configuration['devtool']
  requestHandlerConfig: Handlers.RequestHandlerOptions
}

type PartialModuleConfiguration = Partial<ModuleConfiguration>

type ModulePublicRuntimeConfig = Pick<PartialModuleConfiguration, 'config' | 'clientConfig' | 'serverConfig'>

type Sentry = typeof SentryTypes
type NodeSentry = typeof SentryNode

// add type to Vue context
declare module 'vue/types/vue' {
  interface Vue {
    readonly $sentry: Sentry
    $sentryLoad(): Promise<void>
    $sentryReady(): Promise<Sentry>
  }
}

// App Context and NuxtAppOptions
declare module '@nuxt/types' {
  interface Context {
    readonly $sentry: Sentry
    $sentryLoad(): Promise<void>
    $sentryReady(): Promise<Sentry>
  }

  interface NuxtOptions {
    sentry?: PartialModuleConfiguration
  }

  interface NuxtAppOptions {
    readonly $sentry: Sentry
    $sentryLoad(): Promise<void>
    $sentryReady(): Promise<Sentry>
  }
}

declare module '@nuxt/types/config/runtime' {
  interface NuxtRuntimeConfig {
    sentry?: ModulePublicRuntimeConfig
  }
}

// add types for Vuex Store
declare module 'vuex/types' {
  interface Store<S> {
    readonly $sentry: Sentry
    $sentryLoad(): Promise<void>
    $sentryReady(): Promise<Sentry>
  }
}

declare global {
  namespace NodeJS {
    interface Process {
      sentry: NodeSentry
    }
  }
}

type ModuleOptions = PartialModuleConfiguration

declare const _default: unknown;

export { ModuleOptions, ModulePublicRuntimeConfig, _default as default };
