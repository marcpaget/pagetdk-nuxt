{"version":3,"file":"index.cjs","sources":["../src/channel/messages.ts","../src/channel/errors.ts","../src/channel/ChannelNetwork.ts","../src/channel/types.ts","../src/channel/ChannelEmitter.ts","../src/channel/ChannelReceiver.ts","../src/types.ts","../src/SimulatorClient.ts","../src/SimulatorAPI.ts"],"sourcesContent":["import statuses from \"statuses\";\n\nimport {\n\tRequestMessage,\n\tSuccessResponseMessage,\n\tErrorResponseMessage,\n\tUnknownMessage,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownSuccessResponseMessage,\n\tUnknownErrorResponseMessage,\n} from \"./types\";\n\nlet requestID = 0;\n\nexport const createRequestMessage = <\n\tTType extends string = string,\n\tTData = undefined,\n>(\n\ttype: TType,\n\tdata: TData,\n\tprefix = \"\",\n): RequestMessage<TType, TData> => {\n\treturn {\n\t\trequestID: `${prefix}${requestID++}`,\n\t\ttype,\n\t\tdata,\n\t};\n};\n\nexport const createSuccessResponseMessage = <TData = undefined>(\n\trequestID: string,\n\tdata: TData,\n\tstatus: keyof typeof statuses.message = 200,\n): SuccessResponseMessage<TData> => {\n\tif (status >= 400) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid success status code, expected status to be within \\`[100;400[\\`, got \\`${status}\\``,\n\t\t);\n\t}\n\n\treturn {\n\t\trequestID,\n\t\tstatus,\n\t\tmsg: statuses.message[status]?.replace(/\\.$/, \"\").toLowerCase() ?? \"\",\n\t\tdata,\n\t};\n};\n\nexport const createErrorResponseMessage = <TError = undefined>(\n\trequestID: string,\n\terror: TError,\n\tstatus: keyof typeof statuses.message = 400,\n): ErrorResponseMessage<TError> => {\n\tif (status < 400) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid error status code, expected status to be within \\`[500;600[\\`, got \\`${status}\\``,\n\t\t);\n\t}\n\n\treturn {\n\t\trequestID,\n\t\tstatus,\n\t\tmsg: statuses.message[status]?.replace(/\\.$/, \"\").toLowerCase() ?? \"\",\n\t\terror,\n\t};\n};\n\nexport const validateMessage = (message: unknown): UnknownMessage => {\n\tif (typeof message !== \"object\" || message === null) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid message received, expected message to be of type \\`object\\`, got \\`${typeof message}\\``,\n\t\t);\n\t} else if (\n\t\t!Object.keys(message).every((key) =>\n\t\t\t[\"requestID\", \"type\", \"data\", \"status\", \"msg\", \"error\"].includes(key),\n\t\t)\n\t) {\n\t\tthrow new TypeError(`Invalid message received: ${JSON.stringify(message)}`);\n\t} else if (\n\t\ttypeof (message as Record<string, unknown>).requestID !== \"string\"\n\t) {\n\t\tthrow new TypeError(\n\t\t\t`Invalid message received, expected \\`message.requestID\\` to be of type \\`string\\`, got \\`${typeof (\n\t\t\t\tmessage as Record<string, unknown>\n\t\t\t).id}\\``,\n\t\t);\n\t}\n\n\treturn message as UnknownMessage;\n};\n\nexport const isRequestMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownRequestMessage => {\n\treturn \"type\" in message;\n};\n\nexport const isResponseMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownResponseMessage => {\n\treturn !(\"type\" in message);\n};\n\nexport const isSuccessResponseMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownSuccessResponseMessage => {\n\treturn isResponseMessage(message) && !(\"error\" in message);\n};\n\nexport const isErrorResponseMessage = (\n\tmessage: UnknownMessage,\n): message is UnknownErrorResponseMessage => {\n\treturn isResponseMessage(message) && !(\"data\" in message);\n};\n","import { UnknownErrorResponseMessage } from \".\";\nimport { UnknownRequestMessage } from \"./types\";\n\nexport class ResponseError<\n\tTErrorResponse extends UnknownErrorResponseMessage,\n> extends Error {\n\tpublic response: TErrorResponse;\n\n\tconstructor(errorResponse: TErrorResponse) {\n\t\tsuper(errorResponse.msg);\n\n\t\tthis.response = errorResponse;\n\t}\n}\n\nexport class ConnectionTimeoutError extends Error {\n\tconstructor() {\n\t\tsuper(\"Connection timed out\");\n\t}\n}\nexport class TooManyConcurrentRequestsError extends Error {\n\tpublic request: UnknownRequestMessage;\n\n\tconstructor(request: UnknownRequestMessage) {\n\t\tsuper(`Too many concurrent requests`);\n\n\t\tthis.request = request;\n\t}\n}\nexport class RequestTimeoutError<\n\tTRequest extends UnknownRequestMessage,\n> extends Error {\n\tpublic request: UnknownRequestMessage;\n\n\tconstructor(request: TRequest) {\n\t\tsuper(`Request \\`${request.requestID}\\` timed out`);\n\n\t\tthis.request = request;\n\t}\n}\n\nexport class NotReadyError extends Error {}\nexport class PortNotSetError extends Error {\n\tconstructor() {\n\t\tsuper(\"Port is not set\");\n\t}\n}\nexport class ChannelNotSetError extends Error {\n\tconstructor() {\n\t\tsuper(\"Channel is not set\");\n\t}\n}\n","import {\n\tcreateErrorResponseMessage,\n\tcreateRequestMessage,\n\tcreateSuccessResponseMessage,\n\tisRequestMessage,\n\tisSuccessResponseMessage,\n\tvalidateMessage,\n} from \"./messages\";\nimport {\n\tPortNotSetError,\n\tRequestTimeoutError,\n\tResponseError,\n\tTooManyConcurrentRequestsError,\n} from \"./errors\";\nimport {\n\tRequestMessage,\n\tExtractSuccessResponseMessage,\n\tTransactionsHandlers,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownTransaction,\n\tExtractErrorResponseMessage,\n} from \"./types\";\n\nexport type PostRequestOptions = {\n\ttimeout?: number;\n};\n\nexport type ChannelNetworkOptions = {\n\tdebug: boolean;\n\tmaximumRequestConcurrency: number;\n\tdefaultTimeout: number;\n\trequestIDPrefix: string;\n};\n\nexport const channelNetworkDefaultOptions: ChannelNetworkOptions = {\n\tdebug: false,\n\tmaximumRequestConcurrency: 20,\n\tdefaultTimeout: 5000,\n\trequestIDPrefix: \"channel-\",\n};\n\nexport abstract class ChannelNetwork<\n\tTPartnerTransactions extends Record<string, UnknownTransaction> = Record<\n\t\tstring,\n\t\tnever\n\t>,\n\tTOptions extends Record<string, unknown> = Record<string, unknown>,\n> {\n\tpublic requestHandlers: TransactionsHandlers<TPartnerTransactions>;\n\tpublic options: ChannelNetworkOptions & TOptions;\n\n\tprivate _port: MessagePort | null = null;\n\tprotected get port(): MessagePort {\n\t\tif (!this._port) {\n\t\t\tthrow new PortNotSetError();\n\t\t}\n\n\t\treturn this._port;\n\t}\n\tprotected set port(port: MessagePort | null) {\n\t\t// Destroy old port\n\t\tif (this._port) {\n\t\t\tthis._port.onmessage = null;\n\t\t}\n\n\t\tthis._port = port;\n\t\tif (this._port) {\n\t\t\tthis._port.onmessage = this.onMessage.bind(this);\n\t\t}\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate _pendingRequests: Map<string, (response: any) => void> = new Map();\n\n\tconstructor(\n\t\trequestHandlers: TransactionsHandlers<TPartnerTransactions>,\n\t\toptions: Partial<ChannelNetworkOptions> & TOptions,\n\t) {\n\t\tthis.requestHandlers = requestHandlers;\n\t\tthis.options = { ...channelNetworkDefaultOptions, ...options };\n\t}\n\n\tpublic createRequestMessage<TType extends string = string, TData = undefined>(\n\t\ttype: TType,\n\t\tdata: TData,\n\t): RequestMessage<TType, TData> {\n\t\treturn createRequestMessage(type, data, this.options.requestIDPrefix);\n\t}\n\n\tprotected async onMessage(event: MessageEvent<unknown>): Promise<void> {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(event.data);\n\t\t}\n\n\t\ttry {\n\t\t\tconst message = validateMessage(event.data);\n\n\t\t\tif (isRequestMessage(message)) {\n\t\t\t\tif (!this.requestHandlers[message.type]) {\n\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, undefined, 501),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// TODO: Figure out why type cannot be inferred on its own anymore\n\t\t\t\t\t\tconst response = await this.requestHandlers[message.type](message, {\n\t\t\t\t\t\t\tsuccess: createSuccessResponseMessage.bind(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\t) as Parameters<\n\t\t\t\t\t\t\t\ttypeof this.requestHandlers[string]\n\t\t\t\t\t\t\t>[1][\"success\"],\n\t\t\t\t\t\t\terror: createErrorResponseMessage.bind(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\t) as Parameters<typeof this.requestHandlers[string]>[1][\"error\"],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.postResponse(response);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, error, 500),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._pendingRequests.has(message.requestID)) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Unknown request ID received in response: ${JSON.stringify(\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Pending requests are checked in previous statement\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\tthis._pendingRequests.get(message.requestID)!(message);\n\t\t\t\t\tthis._pendingRequests.delete(message.requestID);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\tconsole.warn(error.message);\n\t\t\t} else {\n\t\t\t\t// Should not be possible, but who knows :shrug:\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected postRequest<\n\t\tTRequest extends UnknownRequestMessage,\n\t\tTResponse extends UnknownResponseMessage,\n\t>(\n\t\trequest: TRequest,\n\t\tpostMessage = (request: TRequest): void => this.port.postMessage(request),\n\t\toptions: PostRequestOptions = {},\n\t): Promise<ExtractSuccessResponseMessage<TResponse>> {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(request);\n\t\t}\n\n\t\tif (this._pendingRequests.size >= this.options.maximumRequestConcurrency) {\n\t\t\tthrow new TooManyConcurrentRequestsError(request);\n\t\t}\n\n\t\treturn new Promise<ExtractSuccessResponseMessage<TResponse>>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tconst requestTimeout = setTimeout(() => {\n\t\t\t\t\tif (this._pendingRequests.has(request.requestID)) {\n\t\t\t\t\t\tthis._pendingRequests.delete(request.requestID);\n\t\t\t\t\t}\n\t\t\t\t\treject(new RequestTimeoutError(request));\n\t\t\t\t}, options.timeout || this.options.defaultTimeout);\n\n\t\t\t\tthis._pendingRequests.set(\n\t\t\t\t\trequest.requestID,\n\t\t\t\t\t(response: TResponse): void => {\n\t\t\t\t\t\tclearTimeout(requestTimeout);\n\n\t\t\t\t\t\tisSuccessResponseMessage(response)\n\t\t\t\t\t\t\t? resolve(response as ExtractSuccessResponseMessage<TResponse>)\n\t\t\t\t\t\t\t: reject(\n\t\t\t\t\t\t\t\t\tnew ResponseError(\n\t\t\t\t\t\t\t\t\t\tresponse as ExtractErrorResponseMessage<TResponse>,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  );\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tpostMessage(request);\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected postResponse<TResponse extends UnknownResponseMessage>(\n\t\tresponse: TResponse,\n\t\tpostMessage = (response: TResponse): void =>\n\t\t\tthis.port.postMessage(response),\n\t): TResponse {\n\t\tif (this.options.debug) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(response);\n\t\t}\n\n\t\tpostMessage(response);\n\n\t\treturn response;\n\t}\n}\n","// Messages\nexport type MessageBase = {\n\trequestID: string;\n};\n\nexport type RequestMessage<TType extends string = string, TData = void> = {\n\ttype: TType;\n\tdata: TData;\n} & MessageBase;\n\nexport type ResponseMessageBase = {\n\tstatus: number;\n\tmsg: string;\n} & MessageBase;\n\nexport type SuccessResponseMessage<TData = void> = {\n\tdata: TData;\n\terror?: never;\n} & ResponseMessageBase;\n\nexport type ErrorResponseMessage<TError = unknown> = {\n\tdata?: never;\n\terror: unknown | TError;\n} & ResponseMessageBase;\n\nexport type ResponseMessage<TData = void, TError = unknown> =\n\t| SuccessResponseMessage<TData>\n\t| ErrorResponseMessage<TError>;\n\nexport type ExtractSuccessResponseMessage<\n\tTResponse extends UnknownResponseMessage,\n> = Extract<TResponse, { error?: never }>;\n\nexport type ExtractErrorResponseMessage<\n\tTResponse extends UnknownResponseMessage,\n> = Extract<TResponse, { data?: never }>;\n\n// Unknown messages\nexport type UnknownRequestMessage = RequestMessage<string, unknown>;\n\nexport type UnknownSuccessResponseMessage = SuccessResponseMessage<unknown>;\n\nexport type UnknownErrorResponseMessage = ErrorResponseMessage<unknown>;\n\nexport type UnknownResponseMessage =\n\t| UnknownSuccessResponseMessage\n\t| UnknownErrorResponseMessage;\n\nexport type UnknownMessage = UnknownRequestMessage | UnknownResponseMessage;\n\n// Transactions\nexport type Transaction<\n\tTRequest extends UnknownRequestMessage,\n\tTResponse extends UnknownResponseMessage = ResponseMessage<void>,\n> = {\n\trequest: TRequest;\n\tresponse: TResponse;\n};\n\nexport type TransactionMethod<\n\tTTransaction extends Transaction<\n\t\tUnknownRequestMessage,\n\t\tUnknownResponseMessage\n\t>,\n> = (\n\tdata: TTransaction[\"request\"][\"data\"],\n) => Promise<ExtractSuccessResponseMessage<TTransaction[\"response\"]>>;\n\nexport type TransactionHandler<\n\tTTransaction extends Transaction<\n\t\tUnknownRequestMessage,\n\t\tUnknownResponseMessage\n\t>,\n> = (\n\trequest: TTransaction[\"request\"],\n\tresponse: {\n\t\tsuccess: (\n\t\t\tdata: ExtractSuccessResponseMessage<TTransaction[\"response\"]>[\"data\"],\n\t\t\tstatus?: number,\n\t\t) => ExtractSuccessResponseMessage<TTransaction[\"response\"]>;\n\t\terror: (\n\t\t\terror: ExtractErrorResponseMessage<TTransaction[\"response\"]>[\"error\"],\n\t\t\tstatus?: number,\n\t\t) => ExtractErrorResponseMessage<TTransaction[\"response\"]>;\n\t},\n) => Promise<TTransaction[\"response\"]> | TTransaction[\"response\"];\n\nexport type TransactionsMethods<\n\tTTransactions extends Record<string, UnknownTransaction>,\n> = {\n\t[Key in keyof TTransactions]: TransactionMethod<TTransactions[Key]>;\n};\n\nexport type TransactionsHandlers<\n\tTTransactions extends Record<string, UnknownTransaction>,\n> = {\n\t[Key in keyof TTransactions]: TransactionHandler<TTransactions[Key]>;\n};\n\n// Unknown transactions\nexport type UnknownTransaction = Transaction<\n\tUnknownRequestMessage,\n\tUnknownResponseMessage\n>;\n\nexport type UnknownTransactionMethod = TransactionMethod<UnknownTransaction>;\n\nexport type UnknownTransactionHandler = TransactionHandler<UnknownTransaction>;\n\n// Emitter\nexport enum InternalEmitterRequestType {\n\tConnect = \"connect\",\n}\n\nexport type InternalEmitterTransactions<\n\tTReceiverOptions extends Record<string, unknown> = Record<string, unknown>,\n> = {\n\t[InternalEmitterRequestType.Connect]: Transaction<\n\t\tRequestMessage<\n\t\t\tInternalEmitterRequestType.Connect,\n\t\t\t| Partial<\n\t\t\t\t\tOmit<TReceiverOptions, \"debug\" | \"requestIDPrefix\" | \"readyTimeout\">\n\t\t\t  >\n\t\t\t| undefined\n\t\t>\n\t>;\n};\n\n// Receiver\nexport enum InternalReceiverRequestType {\n\tReady = \"ready\",\n}\n\nexport type InternalReceiverTransactions = {\n\t[InternalReceiverRequestType.Ready]: Transaction<\n\t\tRequestMessage<InternalReceiverRequestType.Ready>\n\t>;\n};\n","import {\n\tChannelNetwork,\n\tChannelNetworkOptions,\n\tPostRequestOptions,\n} from \"./ChannelNetwork\";\nimport {\n\tcreateSuccessResponseMessage,\n\tcreateErrorResponseMessage,\n\tisRequestMessage,\n\tvalidateMessage,\n} from \"./messages\";\nimport {\n\tChannelNotSetError,\n\tConnectionTimeoutError,\n\tNotReadyError,\n} from \"./errors\";\nimport {\n\tSuccessResponseMessage,\n\tExtractSuccessResponseMessage,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tTransactionsHandlers,\n\tUnknownTransaction,\n\tInternalEmitterRequestType,\n\tInternalReceiverRequestType,\n\tInternalEmitterTransactions,\n} from \"./types\";\nimport { AllChannelReceiverOptions } from \"./ChannelReceiver\";\n\nexport type ChannelEmitterOptions = {\n\tconnectTimeout: number;\n};\n\nexport const channelEmitterDefaultOptions: ChannelEmitterOptions &\n\tPartial<ChannelNetworkOptions> = {\n\tconnectTimeout: 20000,\n\trequestIDPrefix: \"emitter-\",\n};\n\nexport type AllChannelEmitterOptions = ChannelEmitterOptions &\n\tChannelNetworkOptions;\n\nexport abstract class ChannelEmitter<\n\tTReceiverTransactions extends Record<string, UnknownTransaction> = Record<\n\t\tstring,\n\t\tnever\n\t>,\n\tTOptions extends Record<string, unknown> = Record<string, unknown>,\n\tTReceiverOptions extends Record<string, unknown> = Record<string, unknown>,\n> extends ChannelNetwork<\n\tTReceiverTransactions,\n\tChannelEmitterOptions & TOptions\n> {\n\tprivate _target: HTMLIFrameElement;\n\tprivate _channel: MessageChannel | null = null;\n\tprotected get channel(): MessageChannel {\n\t\tif (!this._channel) {\n\t\t\tthrow new ChannelNotSetError();\n\t\t}\n\n\t\treturn this._channel;\n\t}\n\tprotected set channel(channel: MessageChannel | null) {\n\t\tthis._channel = channel;\n\n\t\t// Update port automatically\n\t\tif (this._channel) {\n\t\t\tthis.port = this._channel.port1;\n\t\t} else {\n\t\t\tthis.port = null;\n\t\t}\n\t}\n\tprivate _receiverReady = \"\";\n\tprivate _receiverReadyCallback: (() => Promise<void>) | null = null;\n\tprivate _connected = false;\n\tpublic get connected(): boolean {\n\t\treturn this._connected;\n\t}\n\n\tconstructor(\n\t\ttarget: HTMLIFrameElement,\n\t\trequestHandlers: TransactionsHandlers<TReceiverTransactions>,\n\t\toptions: Partial<AllChannelEmitterOptions> & TOptions,\n\t) {\n\t\tsuper(requestHandlers, { ...channelEmitterDefaultOptions, ...options });\n\n\t\tthis._target = target;\n\n\t\twindow.addEventListener(\"message\", (event) => {\n\t\t\tthis._onPublicMessage(event);\n\t\t});\n\t}\n\n\t/**\n\t * Initiates connection to receiver\n\t *\n\t * @param receiverOptions - Options to configure the receiver with\n\t * @param newOrigin - Indicates to the emitter that we're connecting to a new\n\t *   origin\n\t *\n\t * @returns Success connect message\n\t */\n\tconnect(\n\t\treceiverOptions: InternalEmitterTransactions<\n\t\t\tAllChannelReceiverOptions & TReceiverOptions\n\t\t>[\"connect\"][\"request\"][\"data\"] = {},\n\t\tnewOrigin = false,\n\t): Promise<SuccessResponseMessage> {\n\t\t// Disconnect first\n\t\tthis.disconnect();\n\t\t// If changing origin we'll need to wait for receiver to be ready again\n\t\tif (newOrigin) {\n\t\t\tthis._receiverReady = \"\";\n\t\t}\n\n\t\t// Handshake promise\n\t\treturn new Promise<SuccessResponseMessage>((resolve, reject) => {\n\t\t\t// Wait for target to be loaded\n\t\t\tthis._target.addEventListener(\n\t\t\t\t\"load\",\n\t\t\t\t() => {\n\t\t\t\t\t// Throw if target doesn't allow access to content window\n\t\t\t\t\tif (!this._target.contentWindow) {\n\t\t\t\t\t\treturn reject(new Error(\"Target window is not available\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst receiverReadyTimeout = setTimeout(() => {\n\t\t\t\t\t\treject(new ConnectionTimeoutError());\n\t\t\t\t\t}, this.options.connectTimeout);\n\n\t\t\t\t\t// Connect to target once ready\n\t\t\t\t\tconst receiverReadyCallback = async (): Promise<void> => {\n\t\t\t\t\t\t// Clear receiver ready timeout\n\t\t\t\t\t\tclearTimeout(receiverReadyTimeout);\n\n\t\t\t\t\t\t// Create new message channel (set up port automatically)\n\t\t\t\t\t\t// This is done here to prevent transferable objects neutering\n\t\t\t\t\t\t// when calling `connect()` multiple times\n\t\t\t\t\t\tthis.channel = new MessageChannel();\n\n\t\t\t\t\t\t// Conclude handshake by sending message channel port to target\n\t\t\t\t\t\tconst request = this.createRequestMessage(\n\t\t\t\t\t\t\tInternalEmitterRequestType.Connect,\n\t\t\t\t\t\t\treceiverOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst response = await this.postRequest<\n\t\t\t\t\t\t\tInternalEmitterTransactions<\n\t\t\t\t\t\t\t\tAllChannelReceiverOptions & TReceiverOptions\n\t\t\t\t\t\t\t>[\"connect\"][\"request\"],\n\t\t\t\t\t\t\tInternalEmitterTransactions<\n\t\t\t\t\t\t\t\tAllChannelReceiverOptions & TReceiverOptions\n\t\t\t\t\t\t\t>[\"connect\"][\"response\"]\n\t\t\t\t\t\t>(request, (request) => {\n\t\t\t\t\t\t\t// Target content window is checked in previous statement\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\t\tthis._target.contentWindow!.postMessage(request, \"*\", [\n\t\t\t\t\t\t\t\tthis.channel.port2,\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Finish by aknowledging ready\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateSuccessResponseMessage(this._receiverReady, undefined),\n\t\t\t\t\t\t\t(response) => {\n\t\t\t\t\t\t\t\t// Target content window is checked in previous statement\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\t\t\tthis._target.contentWindow!.postMessage(response, \"*\");\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// If post request succeed, we're connected\n\t\t\t\t\t\tthis._connected = true;\n\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t};\n\n\t\t\t\t\tif (this._receiverReady) {\n\t\t\t\t\t\t// If receiver is already ready, send port immediately\n\t\t\t\t\t\treceiverReadyCallback();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Else wait for receiver to be ready\n\t\t\t\t\t\tthis._receiverReadyCallback = receiverReadyCallback;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ once: true },\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Destroys current connection to receiver if any\n\t */\n\tdisconnect() {\n\t\tthis._connected = false;\n\t\tthis.channel = null;\n\t}\n\n\t/**\n\t * Handles public messages\n\t */\n\tprivate async _onPublicMessage(event: MessageEvent<unknown>): Promise<void> {\n\t\t// Return is event is not from target\n\t\tif (event.source !== this._target.contentWindow) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst message = validateMessage(event.data);\n\n\t\t\tif (isRequestMessage(message)) {\n\t\t\t\tif (this.options.debug) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.debug(event.data);\n\t\t\t\t}\n\n\t\t\t\tswitch (message.type) {\n\t\t\t\t\tcase InternalReceiverRequestType.Ready:\n\t\t\t\t\t\tthis._receiverReady = message.requestID;\n\n\t\t\t\t\t\t// If emitter is waiting for receiver to be ready\n\t\t\t\t\t\tif (this._receiverReadyCallback) {\n\t\t\t\t\t\t\t// We don't await the promise directly as we need to clear the callback first\n\t\t\t\t\t\t\tconst receiverReadyCallbackPromise =\n\t\t\t\t\t\t\t\tthis._receiverReadyCallback();\n\n\t\t\t\t\t\t\tthis._receiverReadyCallback = null;\n\n\t\t\t\t\t\t\tawait receiverReadyCallbackPromise;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, undefined),\n\t\t\t\t\t\t\t(response) => {\n\t\t\t\t\t\t\t\t(event.source as WindowProxy).postMessage(\n\t\t\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\t\t\tevent.origin,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// No response messages are expected on public channel\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\t// Ignore unknown messages\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected postFormattedRequest<\n\t\tTRequest extends UnknownRequestMessage,\n\t\tTResponse extends UnknownResponseMessage,\n\t>(\n\t\ttype: TRequest[\"type\"],\n\t\tdata?: TRequest[\"data\"],\n\t\toptions: PostRequestOptions = {},\n\t): Promise<ExtractSuccessResponseMessage<TResponse>> {\n\t\tif (!this._connected) {\n\t\t\tthrow new NotReadyError(\n\t\t\t\t\"Emitter is not connected, use `ChannelEmitter.connect()` first\",\n\t\t\t);\n\t\t}\n\n\t\treturn this.postRequest(\n\t\t\tthis.createRequestMessage(type, data),\n\t\t\tundefined,\n\t\t\toptions,\n\t\t);\n\t}\n}\n","import {\n\tChannelNetwork,\n\tChannelNetworkOptions,\n\tPostRequestOptions,\n} from \"./ChannelNetwork\";\nimport {\n\tcreateSuccessResponseMessage,\n\tvalidateMessage,\n\tisRequestMessage,\n\tcreateErrorResponseMessage,\n} from \"./messages\";\nimport { NotReadyError } from \"./errors\";\nimport {\n\tSuccessResponseMessage,\n\tUnknownRequestMessage,\n\tUnknownResponseMessage,\n\tUnknownTransaction,\n\tTransactionsHandlers,\n\tInternalReceiverRequestType,\n\tExtractSuccessResponseMessage,\n\tRequestMessage,\n\tResponseMessage,\n\tInternalEmitterRequestType,\n\tInternalEmitterTransactions,\n} from \"./types\";\n\nexport type ChannelReceiverOptions = {\n\treadyTimeout: number;\n};\n\nexport const channelReceiverDefaultOptions: ChannelReceiverOptions &\n\tPartial<ChannelNetworkOptions> = {\n\treadyTimeout: 20000,\n\trequestIDPrefix: \"receiver-\",\n};\n\nexport type AllChannelReceiverOptions = ChannelReceiverOptions &\n\tChannelNetworkOptions;\n\nexport abstract class ChannelReceiver<\n\tTEmitterTransactions extends Record<string, UnknownTransaction> = Record<\n\t\tstring,\n\t\tnever\n\t>,\n\tTOptions extends Record<string, unknown> = Record<string, unknown>,\n> extends ChannelNetwork<\n\tTEmitterTransactions,\n\tChannelReceiverOptions & TOptions\n> {\n\tprivate _ready = false;\n\n\tconstructor(\n\t\trequestHandlers: TransactionsHandlers<TEmitterTransactions>,\n\t\toptions: Partial<AllChannelReceiverOptions> & TOptions,\n\t) {\n\t\tsuper(requestHandlers, { ...channelReceiverDefaultOptions, ...options });\n\n\t\twindow.addEventListener(\"message\", (event) => {\n\t\t\tthis._onPublicMessage(event);\n\t\t});\n\t}\n\n\t/**\n\t * Tells the emitter that receiver is ready\n\t */\n\tpublic async ready(): Promise<SuccessResponseMessage> {\n\t\tif (window.parent === window) {\n\t\t\tthrow new Error(\"Receiver is currently not embedded as an iframe\");\n\t\t}\n\n\t\tthis._ready = false;\n\n\t\tconst request = this.createRequestMessage(\n\t\t\tInternalReceiverRequestType.Ready,\n\t\t\tundefined,\n\t\t);\n\n\t\tconst response = await this.postRequest<\n\t\t\tRequestMessage<InternalReceiverRequestType.Ready>,\n\t\t\tResponseMessage\n\t\t>(\n\t\t\trequest,\n\t\t\t(request) => {\n\t\t\t\twindow.parent.postMessage(request, \"*\");\n\t\t\t},\n\t\t\t{\n\t\t\t\ttimeout: this.options.readyTimeout,\n\t\t\t},\n\t\t);\n\n\t\tthis._ready = true;\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * Handles public messages\n\t */\n\tprivate _onPublicMessage(event: MessageEvent<unknown>): void {\n\t\ttry {\n\t\t\tconst message = validateMessage(event.data);\n\n\t\t\tif (isRequestMessage(message)) {\n\t\t\t\tif (this.options.debug) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.debug(event.data);\n\t\t\t\t}\n\n\t\t\t\tswitch (message.type) {\n\t\t\t\t\tcase InternalEmitterRequestType.Connect:\n\t\t\t\t\t\t// Set port\n\t\t\t\t\t\tthis.port = event.ports[0];\n\n\t\t\t\t\t\t// Update options\n\t\t\t\t\t\tconst { data } =\n\t\t\t\t\t\t\tmessage as InternalEmitterTransactions[\"connect\"][\"request\"];\n\t\t\t\t\t\tthis.options = {\n\t\t\t\t\t\t\t...this.options,\n\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t// Ensure core options remain the same\n\t\t\t\t\t\t\tdebug: this.options.debug,\n\t\t\t\t\t\t\trequestIDPrefix: this.options.requestIDPrefix,\n\t\t\t\t\t\t\treadyTimeout: this.options.readyTimeout,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst response = createSuccessResponseMessage(\n\t\t\t\t\t\t\tmessage.requestID,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.postResponse(response);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.postResponse(\n\t\t\t\t\t\t\tcreateErrorResponseMessage(message.requestID, undefined),\n\t\t\t\t\t\t\t(response) => {\n\t\t\t\t\t\t\t\t(event.source as WindowProxy).postMessage(\n\t\t\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\t\t\tevent.origin,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Forward response messages to default message handler if necessary\n\t\t\t\tif (!this._ready) {\n\t\t\t\t\tthis.onMessage(event);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\t// Ignore unknown messages\n\t\t\t} else {\n\t\t\t\t// Should not be possible, but who knows :shrug:\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected postFormattedRequest<\n\t\tTRequest extends UnknownRequestMessage,\n\t\tTResponse extends UnknownResponseMessage,\n\t>(\n\t\ttype: TRequest[\"type\"],\n\t\tdata?: TRequest[\"data\"],\n\t\toptions: PostRequestOptions = {},\n\t): Promise<ExtractSuccessResponseMessage<TResponse>> {\n\t\tif (!this._ready) {\n\t\t\tthrow new NotReadyError(\n\t\t\t\t\"Receiver is not ready, use `ChannelReceiver.ready()` first\",\n\t\t\t);\n\t\t}\n\n\t\treturn this.postRequest(\n\t\t\tthis.createRequestMessage(type, data),\n\t\t\tundefined,\n\t\t\toptions,\n\t\t);\n\t}\n}\n","import { SliceZone } from \"@prismicio/types\";\n\nimport { RequestMessage, ResponseMessage, Transaction } from \"./channel\";\n\nexport type ActiveSlice = {\n\trect: DOMRect;\n\tsliceID: string;\n\tvariationID: string;\n\tindex: number;\n};\n\nexport type VariationSummary = {\n\tname: string;\n\tid: string;\n};\n\nexport type SliceSummary = {\n\tname: string;\n\tid: string;\n\tvariations: VariationSummary[];\n};\n\nexport type LibrarySummary = {\n\tpath: string;\n\tslices: SliceSummary[];\n};\n\nexport enum APIRequestType {\n\tSetActiveSlice = \"setActiveSlice\",\n}\n\nexport type APITransactions = {\n\t[APIRequestType.SetActiveSlice]: Transaction<\n\t\tRequestMessage<APIRequestType.SetActiveSlice, ActiveSlice | null>\n\t>;\n};\n\nexport enum ClientRequestType {\n\tPing = \"ping\",\n\tGetLibraries = \"getLibraries\",\n\tSetSliceZone = \"setSliceZone\",\n\tSetSliceZoneFromSliceIDs = \"setSliceZoneFromSliceIDs\",\n\tScrollToSlice = \"scrollToSlice\",\n}\n\nexport type ClientTransactions = {\n\t[ClientRequestType.Ping]: Transaction<\n\t\tRequestMessage<ClientRequestType.Ping>,\n\t\tResponseMessage<\"pong\">\n\t>;\n\n\t[ClientRequestType.GetLibraries]: Transaction<\n\t\tRequestMessage<ClientRequestType.GetLibraries>,\n\t\tResponseMessage<LibrarySummary[]>\n\t>;\n\n\t[ClientRequestType.SetSliceZone]: Transaction<\n\t\tRequestMessage<ClientRequestType.SetSliceZone, SliceZone>\n\t>;\n\n\t[ClientRequestType.SetSliceZoneFromSliceIDs]: Transaction<\n\t\tRequestMessage<\n\t\t\tClientRequestType.SetSliceZoneFromSliceIDs,\n\t\t\t{ sliceID: string; variationID: string }[]\n\t\t>\n\t>;\n\n\t[ClientRequestType.ScrollToSlice]: Transaction<\n\t\tRequestMessage<\n\t\t\tClientRequestType.ScrollToSlice,\n\t\t\t{\n\t\t\t\tsliceIndex: number;\n\t\t\t\tbehavior?: \"auto\" | \"smooth\";\n\t\t\t\tblock?: \"start\" | \"center\" | \"end\" | \"nearest\";\n\t\t\t\tinline?: \"start\" | \"center\" | \"end\" | \"nearest\";\n\t\t\t}\n\t\t>\n\t>;\n};\n","import {\n\tChannelEmitter,\n\tTransactionMethod,\n\tAllChannelEmitterOptions,\n\tTransactionsMethods,\n\tTransactionsHandlers,\n} from \"./channel\";\nimport { SimulatorAPIOptions } from \"./SimulatorAPI\";\nimport {\n\tAPIRequestType,\n\tAPITransactions,\n\tClientRequestType,\n\tClientTransactions,\n} from \"./types\";\n\nexport const simulatorClientDefaultOptions: Partial<AllChannelEmitterOptions> =\n\t{\n\t\trequestIDPrefix: \"client-\",\n\t};\n\nexport class SimulatorClient\n\textends ChannelEmitter<\n\t\tAPITransactions,\n\t\tPartial<AllChannelEmitterOptions>,\n\t\tSimulatorAPIOptions\n\t>\n\timplements TransactionsMethods<ClientTransactions>\n{\n\tconstructor(\n\t\ttarget: HTMLIFrameElement,\n\t\trequestHandlers?: Partial<TransactionsHandlers<APITransactions>>,\n\t\toptions?: Partial<AllChannelEmitterOptions>,\n\t) {\n\t\t// True if `options.debug` is true or `debug=true` is among query parameters\n\t\tconst debug =\n\t\t\toptions?.debug ||\n\t\t\t/[\\?&]debug=true/i.test(decodeURIComponent(window.location.search));\n\n\t\tsuper(\n\t\t\ttarget,\n\t\t\t{\n\t\t\t\t[APIRequestType.SetActiveSlice]: (_req, res) => {\n\t\t\t\t\treturn res.success();\n\t\t\t\t},\n\t\t\t\t...requestHandlers,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...simulatorClientDefaultOptions,\n\t\t\t\t...options,\n\t\t\t\tdebug,\n\t\t\t},\n\t\t);\n\n\t\t// Append client to window object\n\t\tif (debug) {\n\t\t\ttype ClientWindow = typeof window & {\n\t\t\t\tprismic: { sliceSimulator?: { client?: SimulatorClient[] } };\n\t\t\t};\n\n\t\t\t(window as ClientWindow).prismic ||= {};\n\t\t\t(window as ClientWindow).prismic.sliceSimulator ||= {};\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t(window as ClientWindow).prismic.sliceSimulator!.client ||= [];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t(window as ClientWindow).prismic.sliceSimulator!.client!.push(this);\n\t\t}\n\t}\n\n\t[ClientRequestType.Ping]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.Ping]\n\t> = async () => {\n\t\treturn await this.postFormattedRequest(ClientRequestType.Ping);\n\t};\n\n\t[ClientRequestType.GetLibraries]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.GetLibraries]\n\t> = async () => {\n\t\treturn await this.postFormattedRequest(ClientRequestType.GetLibraries);\n\t};\n\n\t[ClientRequestType.SetSliceZone]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.SetSliceZone]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tClientRequestType.SetSliceZone,\n\t\t\tdata,\n\t\t);\n\t};\n\n\t[ClientRequestType.SetSliceZoneFromSliceIDs]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.SetSliceZoneFromSliceIDs]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tClientRequestType.SetSliceZoneFromSliceIDs,\n\t\t\tdata,\n\t\t);\n\t};\n\n\t[ClientRequestType.ScrollToSlice]: TransactionMethod<\n\t\tClientTransactions[ClientRequestType.ScrollToSlice]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(\n\t\t\tClientRequestType.ScrollToSlice,\n\t\t\tdata,\n\t\t);\n\t};\n}\n","import {\n\tAllChannelReceiverOptions,\n\tChannelReceiver,\n\tTransactionMethod,\n\tTransactionsHandlers,\n\tTransactionsMethods,\n} from \"./channel\";\nimport {\n\tAPIRequestType,\n\tAPITransactions,\n\tClientRequestType,\n\tClientTransactions,\n} from \"./types\";\n\nexport type SimulatorAPIOptions = {\n\tactiveSliceAPI: boolean;\n};\n\nexport const simulatorAPIDefaultOptions: Partial<AllChannelReceiverOptions> &\n\tSimulatorAPIOptions = {\n\trequestIDPrefix: \"api-\",\n\tactiveSliceAPI: false,\n};\n\nexport class SimulatorAPI\n\textends ChannelReceiver<ClientTransactions, SimulatorAPIOptions>\n\timplements TransactionsMethods<APITransactions>\n{\n\tconstructor(\n\t\trequestHandlers: Omit<\n\t\t\tTransactionsHandlers<ClientTransactions>,\n\t\t\tClientRequestType.Ping\n\t\t> &\n\t\t\tPartial<\n\t\t\t\tPick<TransactionsHandlers<ClientTransactions>, ClientRequestType.Ping>\n\t\t\t>,\n\t\toptions?: Partial<AllChannelReceiverOptions & SimulatorAPIOptions>,\n\t) {\n\t\t// True if `options.debug` is true or `debug=true` is among query parameters\n\t\tconst debug =\n\t\t\toptions?.debug ||\n\t\t\t/[\\?&]debug=true/i.test(decodeURIComponent(window.location.search));\n\n\t\tsuper(\n\t\t\t{\n\t\t\t\t[ClientRequestType.Ping]: (_req, res) => {\n\t\t\t\t\treturn res.success(\"pong\");\n\t\t\t\t},\n\t\t\t\t...requestHandlers,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...simulatorAPIDefaultOptions,\n\t\t\t\t...options,\n\t\t\t\tdebug,\n\t\t\t},\n\t\t);\n\n\t\t// Append API to window object\n\t\tif (debug) {\n\t\t\ttype APIWindow = typeof window & {\n\t\t\t\tprismic: { sliceSimulator?: { api?: SimulatorAPI[] } };\n\t\t\t};\n\n\t\t\t(window as APIWindow).prismic ||= {};\n\t\t\t(window as APIWindow).prismic.sliceSimulator ||= {};\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t(window as APIWindow).prismic.sliceSimulator!.api ||= [];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t(window as APIWindow).prismic.sliceSimulator!.api!.push(this);\n\t\t}\n\t}\n\n\t[APIRequestType.SetActiveSlice]: TransactionMethod<\n\t\tAPITransactions[APIRequestType.SetActiveSlice]\n\t> = async (data) => {\n\t\treturn await this.postFormattedRequest(APIRequestType.SetActiveSlice, data);\n\t};\n}\n"],"names":["requestID","request","response","InternalEmitterRequestType","InternalReceiverRequestType","APIRequestType","ClientRequestType","_a","_b"],"mappings":"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"}