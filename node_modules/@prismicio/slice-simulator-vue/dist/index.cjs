'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const sliceSimulatorCore = require('@prismicio/slice-simulator-core');

const coreManager = new sliceSimulatorCore.CoreManager();
const SliceSimulator = {
  name: "SliceSimulator",
  props: {
    state: {
      type: [Function, Object],
      default: () => sliceSimulatorCore.getDefaultProps().state,
      required: false
    },
    zIndex: {
      type: Number,
      default: sliceSimulatorCore.getDefaultProps().zIndex,
      required: false
    },
    background: {
      type: String,
      default: sliceSimulatorCore.getDefaultProps().background,
      required: false
    }
  },
  data() {
    return {
      coreManager,
      managedState: sliceSimulatorCore.getDefaultManagedState(),
      slices: sliceSimulatorCore.getDefaultSlices(),
      message: sliceSimulatorCore.getDefaultMessage()
    };
  },
  mounted() {
    this.coreManager.stateManager.on(
      sliceSimulatorCore.StateManagerEventType.ManagedState,
      (managedState) => {
        this.managedState = managedState;
      },
      "simulator-managed-state"
    );
    this.coreManager.stateManager.on(
      sliceSimulatorCore.StateManagerEventType.Slices,
      (slices) => {
        this.slices = slices;
      },
      "simulator-slices"
    );
    this.coreManager.stateManager.on(
      sliceSimulatorCore.StateManagerEventType.Message,
      (message) => {
        this.message = message;
      },
      "simulator-message"
    );
    this.coreManager.init(this.state);
  },
  watch: {
    state() {
      this.coreManager.stateManager.reload(this.state);
    }
  },
  destroyed() {
    this.coreManager.stateManager.off(
      sliceSimulatorCore.StateManagerEventType.ManagedState,
      "simulator-managed-state"
    );
    this.coreManager.stateManager.off(
      sliceSimulatorCore.StateManagerEventType.Slices,
      "simulator-slices"
    );
    this.coreManager.stateManager.off(
      sliceSimulatorCore.StateManagerEventType.Message,
      "simulator-message"
    );
  },
  render(h) {
    const children = [];
    if (this.message) {
      children.push(
        h("article", {
          domProps: {
            innerHTML: this.message
          }
        })
      );
    } else if (this.slices.length && this.$scopedSlots.default) {
      children.push(
        h(
          "div",
          {
            attrs: { id: "root" },
            class: sliceSimulatorCore.simulatorRootClass,
            style: this.managedState.status !== sliceSimulatorCore.StateManagerStatus.Loaded ? { display: "none" } : void 0,
            on: {
              "!click": sliceSimulatorCore.onClickHandler,
              "!submit": sliceSimulatorCore.disableEventHandler
            }
          },
          [
            this.$scopedSlots.default({
              slices: this.slices
            })
          ]
        )
      );
    }
    return h(
      "div",
      {
        class: sliceSimulatorCore.simulatorClass,
        style: {
          zIndex: this.zIndex,
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100vh",
          overflow: "auto",
          background: this.background
        }
      },
      children
    );
  }
};

exports.SliceSimulator = SliceSimulator;
//# sourceMappingURL=index.cjs.map
