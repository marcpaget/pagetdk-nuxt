import { CoreManager, getDefaultProps, getDefaultManagedState, getDefaultSlices, getDefaultMessage, StateManagerEventType, simulatorRootClass, StateManagerStatus, onClickHandler, disableEventHandler, simulatorClass } from '@prismicio/slice-simulator-core';

const coreManager = new CoreManager();
const SliceSimulator = {
  name: "SliceSimulator",
  props: {
    state: {
      type: [Function, Object],
      default: () => getDefaultProps().state,
      required: false
    },
    zIndex: {
      type: Number,
      default: getDefaultProps().zIndex,
      required: false
    },
    background: {
      type: String,
      default: getDefaultProps().background,
      required: false
    }
  },
  data() {
    return {
      coreManager,
      managedState: getDefaultManagedState(),
      slices: getDefaultSlices(),
      message: getDefaultMessage()
    };
  },
  mounted() {
    this.coreManager.stateManager.on(
      StateManagerEventType.ManagedState,
      (managedState) => {
        this.managedState = managedState;
      },
      "simulator-managed-state"
    );
    this.coreManager.stateManager.on(
      StateManagerEventType.Slices,
      (slices) => {
        this.slices = slices;
      },
      "simulator-slices"
    );
    this.coreManager.stateManager.on(
      StateManagerEventType.Message,
      (message) => {
        this.message = message;
      },
      "simulator-message"
    );
    this.coreManager.init(this.state);
  },
  watch: {
    state() {
      this.coreManager.stateManager.reload(this.state);
    }
  },
  destroyed() {
    this.coreManager.stateManager.off(
      StateManagerEventType.ManagedState,
      "simulator-managed-state"
    );
    this.coreManager.stateManager.off(
      StateManagerEventType.Slices,
      "simulator-slices"
    );
    this.coreManager.stateManager.off(
      StateManagerEventType.Message,
      "simulator-message"
    );
  },
  render(h) {
    const children = [];
    if (this.message) {
      children.push(
        h("article", {
          domProps: {
            innerHTML: this.message
          }
        })
      );
    } else if (this.slices.length && this.$scopedSlots.default) {
      children.push(
        h(
          "div",
          {
            attrs: { id: "root" },
            class: simulatorRootClass,
            style: this.managedState.status !== StateManagerStatus.Loaded ? { display: "none" } : void 0,
            on: {
              "!click": onClickHandler,
              "!submit": disableEventHandler
            }
          },
          [
            this.$scopedSlots.default({
              slices: this.slices
            })
          ]
        )
      );
    }
    return h(
      "div",
      {
        class: simulatorClass,
        style: {
          zIndex: this.zIndex,
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100vh",
          overflow: "auto",
          background: this.background
        }
      },
      children
    );
  }
};

export { SliceSimulator };
//# sourceMappingURL=index.js.map
