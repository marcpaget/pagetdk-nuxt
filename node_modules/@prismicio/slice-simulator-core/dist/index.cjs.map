{"version":3,"file":"index.cjs","sources":["../src/types.ts","../src/getDefault.ts","../src/domHelpers.ts","../src/messages.ts","../src/lib/EventEmitter.ts","../src/lib/throttle.ts","../src/lib/__PRODUCTION__.ts","../src/StateManager.ts","../src/CoreManager.ts","../src/eventHandlers.ts"],"sourcesContent":["import * as t from \"io-ts\";\n\nimport { SliceZone } from \"@prismicio/types\";\n\nimport { ActiveSlice } from \"@prismicio/slice-simulator-com\";\n\nimport type { CoreManager } from \"./CoreManager\";\n\nexport const LibrariesStateLike = t.record(\n\tt.string,\n\tt.intersection([\n\t\tt.partial({\n\t\t\tname: t.string,\n\t\t}),\n\t\tt.type({\n\t\t\tcomponents: t.record(\n\t\t\t\tt.string,\n\t\t\t\tt.intersection([\n\t\t\t\t\tt.type({\n\t\t\t\t\t\tid: t.string,\n\t\t\t\t\t\tmodel: t.intersection([\n\t\t\t\t\t\t\tt.type({\n\t\t\t\t\t\t\t\tid: t.string,\n\t\t\t\t\t\t\t\tvariations: t.array(\n\t\t\t\t\t\t\t\t\tt.intersection([\n\t\t\t\t\t\t\t\t\t\tt.type({ id: t.string }),\n\t\t\t\t\t\t\t\t\t\tt.partial({ name: t.string }),\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tt.partial({ name: t.string }),\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tmocks: t.record(t.string, t.type({ variation: t.string })),\n\t\t\t\t\t}),\n\t\t\t\t\tt.partial({\n\t\t\t\t\t\tname: t.string,\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t),\n\t\t}),\n\t]),\n);\nexport type LibrariesStateLike = t.TypeOf<typeof LibrariesStateLike>;\n\nexport enum StateManagerEventType {\n\tManagedState = \"managedState\",\n\tSlices = \"slices\",\n\tActiveSlice = \"activeSlice\",\n\tMessage = \"message\",\n}\n\nexport type StateManagerEvents = {\n\t[StateManagerEventType.ManagedState]: ManagedState;\n\t[StateManagerEventType.Slices]: SliceZone;\n\t[StateManagerEventType.ActiveSlice]: ActiveSlice | null;\n\t[StateManagerEventType.Message]: string;\n};\n\nexport enum StateManagerStatus {\n\tPending = \"pending\",\n\tLoaded = \"loaded\",\n\tError = \"error\",\n}\n\nexport type ManagedState = {\n\tdata: LibrariesStateLike | null;\n\tstatus: StateManagerStatus;\n\terror: Error | null;\n};\n\nexport interface SliceSimulatorProps {\n\tstate?:\n\t\t| (() => Promise<LibrariesStateLike>)\n\t\t| Promise<LibrariesStateLike>\n\t\t| LibrariesStateLike;\n\tzIndex?: number;\n\tbackground?: string;\n}\n\nexport interface SliceSimulatorState {\n\tcoreManager: CoreManager;\n\tmanagedState: ManagedState;\n\tslices: SliceZone;\n\tmessage: string;\n}\n\nexport type SliceSimulatorOptions = SliceSimulatorProps & SliceSimulatorState;\n","import { SliceZone } from \"@prismicio/types\";\n\nimport { SliceSimulatorProps, ManagedState, StateManagerStatus } from \"./types\";\n\nexport const getDefaultProps = (): Required<{\n\t[K in keyof SliceSimulatorProps]: NonNullable<SliceSimulatorProps[K]>;\n}> => ({\n\tstate: {},\n\tzIndex: 100,\n\tbackground: \"#ffffff\",\n});\n\nexport const getDefaultManagedState = (): ManagedState => ({\n\tdata: null,\n\tstatus: StateManagerStatus.Pending,\n\terror: null,\n});\n\nexport const getDefaultSlices = (): SliceZone => {\n\treturn [];\n};\n\nexport const getDefaultMessage = (): string => {\n\treturn \"\";\n};\n","export const simulatorClass = \"slice-simulator\";\nexport const simulatorRootClass = \"slice-simulator--root\";\n\nexport const getSliceZoneDOM = (\n\texpectedNumberOfChildren: number,\n): Element | null => {\n\t// If SliceZone has been tagged (#5)\n\tlet node = document.querySelector(`.${simulatorClass} [data-slice-zone]`);\n\tif (node) {\n\t\tif (node.children.length !== expectedNumberOfChildren) {\n\t\t\tconsole.warn(\n\t\t\t\t`Flagged SliceZone has an unexpected number of children, found ${node.children.length} but expected ${expectedNumberOfChildren}. This might lead to unexpected behaviors. Are you sure you tagged the right element?`,\n\t\t\t);\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t// Start searching\n\tnode = document.querySelector(`.${simulatorClass} .${simulatorRootClass}`);\n\n\tif (!node) {\n\t\treturn null;\n\t}\n\n\tconst searchDepth = 5;\n\tfor (let i = 0; i < searchDepth; i++) {\n\t\tif (node.children.length === expectedNumberOfChildren) {\n\t\t\t// Return the first node that matches the expected number of children\n\t\t\treturn node;\n\t\t} else if (node.children.length) {\n\t\t\t// Continue searching if current node has children\n\t\t\tnode = node.children[0];\n\t\t} else {\n\t\t\t// Stop searching if current node has no children\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Failed to find SliceZone\n\treturn null;\n};\n\nexport const getActiveSliceDOM = (\n\t$sliceZone: Element,\n\tmouse: { x: number; y: number },\n): Element | null => {\n\t// Raycast cursor position on DOM\n\tconst raycast = document.elementsFromPoint(mouse.x, mouse.y).reverse();\n\n\t// Find SliceZone in raycast\n\tconst sliceZoneIndex = raycast.indexOf($sliceZone);\n\n\t// SliceZone is not part of raycast\n\tif (sliceZoneIndex === -1) {\n\t\treturn null;\n\t}\n\n\tconst $slice = raycast[sliceZoneIndex + 1];\n\n\t// Slice is not part of raycast\n\tif (!$slice) {\n\t\treturn null;\n\t}\n\n\treturn $slice;\n};\n","const div = (content: string) =>\n\t`<div style=\"word-spacing: initial; white-space: pre; line-height: initial; font-family: monospace; color: #ffffff; mix-blend-mode: difference; padding: 1rem; font-size: 1rem;\">${content}</div>`;\n\nconst a = (href: string, label?: string) =>\n\t`<a href=\"${href}\" style=\"text-decoration: underline;\">${label || href}<a>`;\n\nconst header =\n\t\"   _____ ___          _____ _                 __      __            \\n  / ___// (_)_______ / ___/(_)___ ___  __  __/ /___ _/ /_____  _____\\n  \\\\__ \\\\/ / / ___/ _ \\\\\\\\__ \\\\/ / __ `__ \\\\/ / / / / __ `/ __/ __ \\\\/ ___/\\n ___/ / / / /__/  __/__/ / / / / / / / /_/ / / /_/ / /_/ /_/ / /    \\n/____/_/_/\\\\___/\\\\___/____/_/_/ /_/ /_/\\\\__,_/_/\\\\__,_/\\\\__/\\\\____/_/     \\n                  / /_  __  __   / __ \\\\_____(_)________ ___  (_)____\\n                 / __ \\\\/ / / /  / /_/ / ___/ / ___/ __ `__ \\\\/ / ___/\\n                / /_/ / /_/ /  / ____/ /  / (__  ) / / / / / / /__  \\n               /_.___/\\\\__, /  /_/   /_/  /_/____/_/ /_/ /_/_/\\\\___/  \\n                     /____/\\n\\n\";\n\nconst footer =\n\t\"\\n\\n\\n\\n\\n\\n                                                - The Prismic team\";\n\nexport const sliceSimulatorAccessedDirectly = div(\n\t[\n\t\theader,\n\t\t`You're seeing this page because you're accessing Slice Simulator\\ndirectly, e.g:\\n\\n  - ${a(\n\t\t\t\"http://localhost:3000/slice-simulator\",\n\t\t)}\\n\\n\\n\\nSlice Simulator is not meant to be accessed this way, to preview your\\nslices, head over to Slice Machine UI:\\n\\n  - ${a(\n\t\t\t\"http://localhost:9999\",\n\t\t)}\\n\\n\\n\\nIf you believe this is an error, please reach out to us:\\n\\n  - ${a(\n\t\t\t\"https://github.com/prismicio/slice-machine/issues/new/choose\",\n\t\t)}`,\n\t\tfooter,\n\t].join(\"\"),\n);\n","export type Listener<T> = (event: T) => void;\n\nexport type EventMap = {\n\t[K in string]: unknown;\n};\n\nexport abstract class EventEmitter<TEventMap = EventMap> {\n\tprivate _listeners: {\n\t\t[K in keyof TEventMap]?: [Listener<TEventMap[K]>, string | null][];\n\t} = {};\n\n\ton<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tlistener: Listener<TEventMap[TEventType]>,\n\t\tkey: string | null = null,\n\t): void {\n\t\tthis._listeners[event] = [\n\t\t\t...(this._listeners[event] ?? []),\n\t\t\t[listener, key],\n\t\t];\n\t}\n\n\toff<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tlistenerOrKey: Listener<TEventMap[TEventType]> | string,\n\t): void {\n\t\tthis._listeners[event] = (this._listeners[event] ?? []).filter(\n\t\t\t([listener, key]) =>\n\t\t\t\ttypeof listenerOrKey === \"function\"\n\t\t\t\t\t? listener !== listenerOrKey\n\t\t\t\t\t: key !== listenerOrKey,\n\t\t);\n\t}\n\n\temit<TEventType extends keyof TEventMap>(\n\t\tevent: TEventType,\n\t\tpayload: TEventMap[TEventType],\n\t): void {\n\t\t(this._listeners[event] ?? []).forEach((listener) => listener[0](payload));\n\t}\n}\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport const throttle = (fn: Function, delay = 16) => {\n\tlet lastExec = 0;\n\tlet timer: NodeJS.Timeout | null = null;\n\n\treturn function (this: unknown, ...args: unknown[]) {\n\t\tconst now = Date.now();\n\t\tconst delta = now - lastExec;\n\n\t\tif (delta >= delay) {\n\t\t\tfn.apply(this, args);\n\t\t\tlastExec = now;\n\t\t} else {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t}\n\t\t\ttimer = setTimeout(() => {\n\t\t\t\tfn.apply(this, args);\n\t\t\t\tlastExec = Date.now();\n\t\t\t}, delay - delta);\n\t\t}\n\t};\n};\n","// We need to polyfill process if it doesn't exist, such as in the browser.\nif (typeof process === \"undefined\") {\n\tglobalThis.process = { env: {} } as typeof process;\n}\n\n/**\n * `true` if in the production environment, `false` otherwise.\n *\n * This boolean can be used to perform actions only in development environments,\n * such as logging.\n */\nexport const __PRODUCTION__ = process.env.NODE_ENV === \"production\";\n","import { SharedSlice, SliceZone } from \"@prismicio/types\";\n\nimport { ActiveSlice, LibrarySummary } from \"@prismicio/slice-simulator-com\";\n\nimport { EventEmitter } from \"./lib/EventEmitter\";\nimport { getDefaultManagedState, getDefaultSlices } from \"./getDefault\";\nimport {\n\tLibrariesStateLike,\n\tManagedState,\n\tSliceSimulatorProps,\n\tStateManagerEvents,\n\tStateManagerEventType,\n\tStateManagerStatus,\n} from \"./types\";\nimport { getActiveSliceDOM, getSliceZoneDOM } from \"./domHelpers\";\nimport { throttle } from \"./lib/throttle\";\nimport { __PRODUCTION__ } from \"./lib/__PRODUCTION__\";\n\nexport class StateManager extends EventEmitter<StateManagerEvents> {\n\tprivate _managedState: ManagedState;\n\tpublic set managedState(managedState: ManagedState) {\n\t\tthis._managedState = managedState;\n\t\tthis.emit(StateManagerEventType.ManagedState, managedState);\n\t}\n\tpublic get managedState(): ManagedState {\n\t\treturn this._managedState;\n\t}\n\n\tprivate _slices: SliceZone;\n\tpublic set slices(slices: SliceZone) {\n\t\tthis._slices = slices;\n\t\t// Clean up message\n\t\tthis.message = \"\";\n\t\t// Dispatch event\n\t\tthis.emit(StateManagerEventType.Slices, slices);\n\t}\n\tpublic get slices(): SliceZone {\n\t\treturn this._slices;\n\t}\n\n\tprivate _activeSlice: ActiveSlice | null;\n\tpublic set activeSlice(activeSlice: ActiveSlice | null) {\n\t\tthis._activeSlice = activeSlice;\n\t\tthis.emit(StateManagerEventType.ActiveSlice, activeSlice);\n\t}\n\tpublic get activeSlice(): ActiveSlice | null {\n\t\treturn this._activeSlice;\n\t}\n\n\tprivate _message: string;\n\tpublic set message(message: string) {\n\t\tthis._message = message;\n\t\tthis.emit(StateManagerEventType.Message, message);\n\t}\n\tpublic get message(): string {\n\t\treturn this._message;\n\t}\n\n\tprivate _mouse: { x: number; y: number };\n\n\tconstructor(\n\t\tmanagedState: ManagedState = getDefaultManagedState(),\n\t\tslices: SliceZone = getDefaultSlices(),\n\t) {\n\t\tsuper();\n\n\t\tthis._managedState = managedState;\n\t\tthis._slices = slices;\n\t\tthis._activeSlice = null;\n\t\tthis._message = \"\";\n\n\t\t// StateManager needs to keep track of mouse position for the active slice\n\t\tthis._mouse = { x: 0, y: 0 };\n\t}\n\n\tasync init(state: SliceSimulatorProps[\"state\"]): Promise<void> {\n\t\t// Load state\n\t\tthis._managedState = await this.load(state);\n\n\t\tif (__PRODUCTION__) {\n\t\t\t// Load all slice chunks at once to prevent any flickering in production\n\t\t\tawait this.forceSliceChunksDownload();\n\t\t}\n\n\t\tthis.setDefaultSliceZone();\n\n\t\t// Defering event to allow for chunks to load in background\n\t\tthis.emit(StateManagerEventType.ManagedState, this._managedState);\n\n\t\t// Init listener\n\t\twindow.addEventListener(\"mousemove\", (event) => {\n\t\t\tthis._mouse = { x: event.clientX, y: event.clientY };\n\t\t});\n\t}\n\n\tasync load(state: SliceSimulatorProps[\"state\"]): Promise<ManagedState> {\n\t\ttry {\n\t\t\tconst raw = await (typeof state === \"function\" ? state() : state);\n\n\t\t\tconst res = LibrariesStateLike.decode(raw);\n\n\t\t\tif (res._tag === \"Left\") {\n\t\t\t\tconsole.error(res.left);\n\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"State does not validate expected format, see console logs for detailed report\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: res.right,\n\t\t\t\tstatus: StateManagerStatus.Loaded,\n\t\t\t\terror: null,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\n\t\t\treturn {\n\t\t\t\tdata: null,\n\t\t\t\tstatus: StateManagerStatus.Error,\n\t\t\t\terror: error as Error,\n\t\t\t};\n\t\t}\n\t}\n\n\tasync reload(state: SliceSimulatorProps[\"state\"]): Promise<void> {\n\t\tthis.managedState = await this.load(state);\n\t\tthis.recoverSliceZone();\n\t}\n\n\tprivate _throwIfNotLoaded(\n\t\tmethodName: string,\n\t): asserts this is { managedState: { data: LibrariesStateLike } } {\n\t\tif (this.managedState.status === StateManagerStatus.Error) {\n\t\t\tthrow (\n\t\t\t\tthis.managedState.error ??\n\t\t\t\tnew Error(\"Unknown state error, see console logs for detailed report\")\n\t\t\t);\n\t\t} else if (\n\t\t\tthis.managedState.status === StateManagerStatus.Pending ||\n\t\t\t!this.managedState.data\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t`\\`StateManager.${methodName}()\\` can only be called when the state is loaded, use \\`StateManager.load()\\` first`,\n\t\t\t);\n\t\t}\n\t}\n\n\tgetLibraries(): LibrarySummary[] {\n\t\tthis._throwIfNotLoaded(\"getLibraries\");\n\n\t\treturn Object.entries(this.managedState.data).map(\n\t\t\t([libraryPath, library]) => {\n\t\t\t\tconst sliceMap = library.components;\n\n\t\t\t\treturn {\n\t\t\t\t\tpath: libraryPath,\n\t\t\t\t\tslices: Object.values(sliceMap).map((slice) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: slice.id,\n\t\t\t\t\t\t\tname: slice.name || slice.id,\n\t\t\t\t\t\t\tvariations: slice.model.variations.map((variation) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tid: variation.id,\n\t\t\t\t\t\t\t\t\tname: variation.name || variation.id,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t},\n\t\t);\n\t}\n\n\tgetMocks(): Record<string, Record<string, SharedSlice>> {\n\t\tthis._throwIfNotLoaded(\"getMocks\");\n\n\t\treturn Object.values(this.managedState.data).reduce<\n\t\t\tRecord<string, Record<string, SharedSlice>>\n\t\t>((acc, library) => {\n\t\t\tconst sliceMap = library.components;\n\n\t\t\tObject.values(sliceMap).forEach((slice) => {\n\t\t\t\tacc[slice.id] = Object.values(slice.mocks).reduce<\n\t\t\t\t\tRecord<string, SharedSlice>\n\t\t\t\t>((acc, mock) => {\n\t\t\t\t\t// TODO: Type definition from Slice Machine core is incomplete\n\t\t\t\t\tacc[mock.variation] = mock as unknown as SharedSlice;\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {});\n\t\t\t});\n\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n\n\tasync forceSliceChunksDownload(): Promise<void> {\n\t\t// Download all slices chunks once\n\t\tthis.setSliceZoneFromSliceIDs(\n\t\t\tthis.getLibraries()\n\t\t\t\t.map((library) => {\n\t\t\t\t\treturn library.slices.map((slice) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsliceID: slice.id,\n\t\t\t\t\t\t\tvariationID: slice.variations[0].id,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.flat(),\n\t\t);\n\t\tawait new Promise((resolve) => setTimeout(resolve, 0));\n\t\tthis.slices = [];\n\t}\n\n\t/**\n\t * Set default SliceZone according to URL query parameters (lid, sid, vid)\n\t */\n\tsetDefaultSliceZone(): void {\n\t\tthis._throwIfNotLoaded(\"setDefaultSliceZone\");\n\n\t\tif (typeof window !== \"undefined\") {\n\t\t\tconst url = new URL(window.location.href);\n\n\t\t\tif (url.searchParams.has(\"sid\") && url.searchParams.has(\"vid\")) {\n\t\t\t\tthis.setSliceZoneFromSliceIDs([\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\tsliceID: url.searchParams.get(\"sid\")!,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\tvariationID: url.searchParams.get(\"vid\")!,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Recover SliceZone if possible\n\trecoverSliceZone(): void {\n\t\tif (this._setSliceZoneFromSliceIDsLastCall) {\n\t\t\tthis.setSliceZoneFromSliceIDs(this._setSliceZoneFromSliceIDsLastCall);\n\t\t}\n\t}\n\n\tprivate _setActiveSlice = (): void => {\n\t\t// There can't be an active slice if there's no slices displayed\n\t\tif (this.slices.length === 0) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst $sliceZone = getSliceZoneDOM(this.slices.length);\n\n\t\t// SliceZone has not been found, therefore active slice cannot be found\n\t\tif (!$sliceZone) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst $activeSlice = getActiveSliceDOM($sliceZone, this._mouse);\n\n\t\t// Active slice has not been found\n\t\tif (!$activeSlice) {\n\t\t\tthis.activeSlice = null;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeSliceIndex = Array.prototype.indexOf.call(\n\t\t\t$sliceZone.children,\n\t\t\t$activeSlice,\n\t\t);\n\n\t\t// Active slice has been found\n\t\tthis.activeSlice = {\n\t\t\trect: $activeSlice.getBoundingClientRect(),\n\t\t\tsliceID: this.slices[activeSliceIndex].slice_type,\n\t\t\tvariationID: (this.slices[activeSliceIndex] as SharedSlice).variation,\n\t\t\tindex: activeSliceIndex,\n\t\t};\n\t};\n\tsetActiveSlice = throttle(this._setActiveSlice, 16);\n\n\tsetSliceZone(slices: SliceZone): void {\n\t\t// Wipe out the last call to setSliceZoneFromSliceIDs because slices cannot be recovered if setSliceZone was called last\n\t\tthis._setSliceZoneFromSliceIDsLastCall = null;\n\n\t\t// Set slices\n\t\tthis.slices = slices;\n\t}\n\n\t// Keep in memory last call to setSliceZoneFromSliceIDs to be able to recover slices\n\tprivate _setSliceZoneFromSliceIDsLastCall:\n\t\t| {\n\t\t\t\tsliceID: string;\n\t\t\t\tvariationID: string;\n\t\t  }[]\n\t\t| null = null;\n\tsetSliceZoneFromSliceIDs(\n\t\tslices: {\n\t\t\tsliceID: string;\n\t\t\tvariationID: string;\n\t\t}[],\n\t): void {\n\t\tthis._setSliceZoneFromSliceIDsLastCall = slices;\n\n\t\tconst mocks = this.getMocks();\n\n\t\tthis.slices = slices\n\t\t\t.map((slice) => {\n\t\t\t\tconst sliceID = slice.sliceID;\n\t\t\t\tconst variationID = slice.variationID;\n\n\t\t\t\tif (sliceID in mocks && variationID in mocks[sliceID]) {\n\t\t\t\t\treturn mocks[sliceID][variationID];\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter(Boolean) as SliceZone;\n\t}\n}\n","import {\n\tClientRequestType,\n\tResponseError,\n\tSimulatorAPI,\n} from \"@prismicio/slice-simulator-com\";\nimport { SliceZone } from \"@prismicio/types\";\n\nimport { getDefaultManagedState, getDefaultSlices } from \"./getDefault\";\nimport { getSliceZoneDOM } from \"./domHelpers\";\nimport { sliceSimulatorAccessedDirectly } from \"./messages\";\nimport { StateManager } from \"./StateManager\";\nimport {\n\tManagedState,\n\tSliceSimulatorProps,\n\tStateManagerEventType,\n} from \"./types\";\n\nexport class CoreManager {\n\tpublic stateManager: StateManager;\n\tprivate _api: SimulatorAPI | null;\n\tprivate _initialized: boolean;\n\n\tconstructor(\n\t\tmanagedState: ManagedState = getDefaultManagedState(),\n\t\tslices: SliceZone = getDefaultSlices(),\n\t) {\n\t\tthis.stateManager = new StateManager(managedState, slices);\n\t\tthis._api = null;\n\t\tthis._initialized = false;\n\t}\n\n\tasync init(state: SliceSimulatorProps[\"state\"]) {\n\t\t// When not handling HMR, init might be called multiple times, here we take a shortcut by just reloading the state on subsequent inits\n\t\tif (this._initialized) {\n\t\t\tawait this.stateManager.reload(state);\n\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis._initialized = true;\n\t\t}\n\n\t\t// Init state manager\n\t\tawait this.stateManager.init(state);\n\n\t\t// Init COM API\n\t\ttry {\n\t\t\tawait this._initAPI();\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror instanceof Error &&\n\t\t\t\terror.message === \"Receiver is currently not embedded as an iframe\" &&\n\t\t\t\t!this.stateManager.slices.length\n\t\t\t) {\n\t\t\t\t// Catch not embedded error and display message\n\t\t\t\tthis.stateManager.message = sliceSimulatorAccessedDirectly;\n\t\t\t}\n\t\t\tconsole.error(error);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Init listeners\n\t\tthis._initListeners();\n\t}\n\n\tprivate async _initAPI(): Promise<void> {\n\t\t// Register SimulatorAPI request handlers\n\t\tthis._api = new SimulatorAPI({\n\t\t\t[ClientRequestType.GetLibraries]: (_req, res) => {\n\t\t\t\treturn res.success(this.stateManager.getLibraries());\n\t\t\t},\n\t\t\t[ClientRequestType.SetSliceZone]: (req, res) => {\n\t\t\t\tthis.stateManager.setSliceZone(req.data);\n\n\t\t\t\treturn res.success();\n\t\t\t},\n\t\t\t[ClientRequestType.SetSliceZoneFromSliceIDs]: (req, res) => {\n\t\t\t\tthis.stateManager.setSliceZoneFromSliceIDs(req.data);\n\n\t\t\t\treturn res.success();\n\t\t\t},\n\t\t\t[ClientRequestType.ScrollToSlice]: (req, res) => {\n\t\t\t\t// Error if `sliceIndex` is invalid\n\t\t\t\tif (req.data.sliceIndex < 0) {\n\t\t\t\t\treturn res.error(\"`sliceIndex` must be > 0\", 400);\n\t\t\t\t} else if (req.data.sliceIndex >= this.stateManager.slices.length) {\n\t\t\t\t\treturn res.error(\n\t\t\t\t\t\t`\\`sliceIndex\\` must be < ${this.stateManager.slices.length} (\\`<SliceZone />\\` current length)`,\n\t\t\t\t\t\t400,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst $sliceZone = getSliceZoneDOM(this.stateManager.slices.length);\n\t\t\t\tif (!$sliceZone) {\n\t\t\t\t\treturn res.error(\"Failed to find `<SliceZone />`\", 500);\n\t\t\t\t}\n\n\t\t\t\t// Destroy existing active slice as we're about to scroll\n\t\t\t\tthis.stateManager.activeSlice = null;\n\n\t\t\t\tconst $slice = $sliceZone.children[req.data.sliceIndex];\n\t\t\t\tif (!$slice) {\n\t\t\t\t\treturn res.error(\n\t\t\t\t\t\t`Failed fo find slice at index $\\`{req.data.sliceIndex}\\` in \\`<SliceZone />\\``,\n\t\t\t\t\t\t500,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Scroll to Slice\n\t\t\t\t$slice.scrollIntoView({\n\t\t\t\t\tbehavior: req.data.behavior,\n\t\t\t\t\tblock: req.data.block,\n\t\t\t\t\tinline: req.data.inline,\n\t\t\t\t});\n\n\t\t\t\t// Update active slice after scrolling\n\t\t\t\tthis._api?.options.activeSliceAPI &&\n\t\t\t\t\tsetTimeout(this.stateManager.setActiveSlice, 750);\n\n\t\t\t\treturn res.success();\n\t\t\t},\n\t\t});\n\n\t\t// Mark API as ready\n\t\tawait this._api.ready();\n\t}\n\n\tprivate _initListeners(): void {\n\t\t// Update active slice on mouse move\n\t\twindow.addEventListener(\"mousemove\", () => {\n\t\t\tthis._api?.options.activeSliceAPI && this.stateManager.setActiveSlice();\n\t\t});\n\t\t// Update active slice on events impacting slices rendering\n\t\twindow.addEventListener(\"resize\", () => {\n\t\t\tthis._api?.options.activeSliceAPI && this.stateManager.setActiveSlice();\n\t\t});\n\t\twindow.addEventListener(\"mousewheel\", () => {\n\t\t\tthis._api?.options.activeSliceAPI &&\n\t\t\t\tsetTimeout(this.stateManager.setActiveSlice, 200);\n\t\t});\n\n\t\t// Update active slice when slices are set\n\t\tthis.stateManager.on(StateManagerEventType.Slices, () => {\n\t\t\tthis._api?.options.activeSliceAPI && this.stateManager.setActiveSlice();\n\t\t});\n\t\t// Send active slices to renderer\n\t\tthis.stateManager.on(\n\t\t\tStateManagerEventType.ActiveSlice,\n\t\t\tasync (activeSlice) => {\n\t\t\t\tif (this._api) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this._api.setActiveSlice(activeSlice);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Just log bad requests, throw everything else\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\terror instanceof ResponseError &&\n\t\t\t\t\t\t\terror.response.status === 400\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconsole.error(error.response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n}\n","export const disableEventHandler = (event: Event): void => {\n\tevent.preventDefault();\n\tevent.stopPropagation();\n};\n\nexport const onClickHandler = (\n\tevent: MouseEvent & { path?: HTMLElement[] },\n): void => {\n\tif (\n\t\tevent.path &&\n\t\tevent.path.slice(0, 5).some((el) => el instanceof HTMLAnchorElement)\n\t) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n};\n"],"names":["t","StateManagerEventType","StateManagerStatus","acc","SimulatorAPI","ClientRequestType","ResponseError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAQO,MAAM,qBAAqBA,YAAE,CAAA,MAAA;AAAA,EACnCA,YAAE,CAAA,MAAA;AAAA,EACFA,aAAE,YAAa,CAAA;AAAA,IACdA,aAAE,OAAQ,CAAA;AAAA,MACT,MAAMA,YAAE,CAAA,MAAA;AAAA,KACR,CAAA;AAAA,IACDA,aAAE,IAAK,CAAA;AAAA,MACN,YAAYA,YAAE,CAAA,MAAA;AAAA,QACbA,YAAE,CAAA,MAAA;AAAA,QACFA,aAAE,YAAa,CAAA;AAAA,UACdA,aAAE,IAAK,CAAA;AAAA,YACN,IAAIA,YAAE,CAAA,MAAA;AAAA,YACN,KAAA,EAAOA,aAAE,YAAa,CAAA;AAAA,cACrBA,aAAE,IAAK,CAAA;AAAA,gBACN,IAAIA,YAAE,CAAA,MAAA;AAAA,gBACN,YAAYA,YAAE,CAAA,KAAA;AAAA,kBACbA,aAAE,YAAa,CAAA;AAAA,oBACdA,aAAE,IAAK,CAAA,EAAE,EAAI,EAAAA,YAAA,CAAE,QAAQ,CAAA;AAAA,oBACvBA,aAAE,OAAQ,CAAA,EAAE,IAAM,EAAAA,YAAA,CAAE,QAAQ,CAAA;AAAA,mBAC5B,CAAA;AAAA,iBACF;AAAA,eACA,CAAA;AAAA,cACDA,aAAE,OAAQ,CAAA,EAAE,IAAM,EAAAA,YAAA,CAAE,QAAQ,CAAA;AAAA,aAC5B,CAAA;AAAA,YACD,KAAO,EAAAA,YAAA,CAAE,MAAO,CAAAA,YAAA,CAAE,MAAQ,EAAAA,YAAA,CAAE,IAAK,CAAA,EAAE,SAAW,EAAAA,YAAA,CAAE,MAAO,EAAC,CAAC,CAAA;AAAA,WACzD,CAAA;AAAA,UACDA,aAAE,OAAQ,CAAA;AAAA,YACT,MAAMA,YAAE,CAAA,MAAA;AAAA,WACR,CAAA;AAAA,SACD,CAAA;AAAA,OACF;AAAA,KACA,CAAA;AAAA,GACD,CAAA;AACF,CAAA,CAAA;AAGY,IAAA,qBAAA,qBAAAC,sBAAL,KAAA;AACN,EAAAA,uBAAA,cAAe,CAAA,GAAA,cAAA,CAAA;AACf,EAAAA,uBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,uBAAA,aAAc,CAAA,GAAA,aAAA,CAAA;AACd,EAAAA,uBAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AAJC,EAAAA,OAAAA,sBAAAA,CAAAA;AAAA,CAAA,EAAA,qBAAA,IAAA,EAAA,EAAA;AAcA,IAAA,kBAAA,qBAAAC,mBAAL,KAAA;AACN,EAAAA,oBAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AACV,EAAAA,oBAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,oBAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AAHG,EAAAA,OAAAA,mBAAAA,CAAAA;AAAA,CAAA,EAAA,kBAAA,IAAA,EAAA;;ACtDL,MAAM,kBAAkB,OAExB;AAAA,EACN,OAAO,EAAC;AAAA,EACR,MAAQ,EAAA,GAAA;AAAA,EACR,UAAY,EAAA,SAAA;AACb,CAAA,EAAA;AAEO,MAAM,yBAAyB,OAAqB;AAAA,EAC1D,IAAM,EAAA,IAAA;AAAA,EACN,QAAQ,kBAAmB,CAAA,OAAA;AAAA,EAC3B,KAAO,EAAA,IAAA;AACR,CAAA,EAAA;AAEO,MAAM,mBAAmB,MAAiB;AAChD,EAAA,OAAO,EAAC,CAAA;AACT,EAAA;AAEO,MAAM,oBAAoB,MAAc;AAC9C,EAAO,OAAA,EAAA,CAAA;AACR;;ACxBO,MAAM,cAAiB,GAAA,kBAAA;AACvB,MAAM,kBAAqB,GAAA,wBAAA;AAErB,MAAA,eAAA,GAAkB,CAC9B,wBACoB,KAAA;AAEpB,EAAA,IAAI,IAAO,GAAA,QAAA,CAAS,aAAc,CAAA,CAAA,CAAA,EAAI,cAAkC,CAAA,kBAAA,CAAA,CAAA,CAAA;AACxE,EAAA,IAAI,IAAM,EAAA;AACT,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,MAAA,KAAW,wBAA0B,EAAA;AACtD,MAAQ,OAAA,CAAA,IAAA;AAAA,QACP,CAAA,8DAAA,EAAiE,IAAK,CAAA,QAAA,CAAS,MAAuB,CAAA,cAAA,EAAA,wBAAA,CAAA,qFAAA,CAAA;AAAA,OACvG,CAAA;AAAA,KACD;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACR;AAGA,EAAA,IAAA,GAAO,QAAS,CAAA,aAAA,CAAc,CAAI,CAAA,EAAA,cAAA,CAAA,EAAA,EAAmB,kBAAoB,CAAA,CAAA,CAAA,CAAA;AAEzE,EAAA,IAAI,CAAC,IAAM,EAAA;AACV,IAAO,OAAA,IAAA,CAAA;AAAA,GACR;AAEA,EAAA,MAAM,WAAc,GAAA,CAAA,CAAA;AACpB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CAAK,EAAA,EAAA;AACrC,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,MAAA,KAAW,wBAA0B,EAAA;AAEtD,MAAO,OAAA,IAAA,CAAA;AAAA,KACR,MAAA,IAAW,IAAK,CAAA,QAAA,CAAS,MAAQ,EAAA;AAEhC,MAAA,IAAA,GAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,KACf,MAAA;AAEN,MAAA,MAAA;AAAA,KACD;AAAA,GACD;AAGA,EAAO,OAAA,IAAA,CAAA;AACR,EAAA;AAEa,MAAA,iBAAA,GAAoB,CAChC,UAAA,EACA,KACoB,KAAA;AAEpB,EAAM,MAAA,OAAA,GAAU,SAAS,iBAAkB,CAAA,KAAA,CAAM,GAAG,KAAM,CAAA,CAAC,EAAE,OAAQ,EAAA,CAAA;AAGrE,EAAM,MAAA,cAAA,GAAiB,OAAQ,CAAA,OAAA,CAAQ,UAAU,CAAA,CAAA;AAGjD,EAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AAC1B,IAAO,OAAA,IAAA,CAAA;AAAA,GACR;AAEA,EAAM,MAAA,MAAA,GAAS,QAAQ,cAAiB,GAAA,CAAA,CAAA,CAAA;AAGxC,EAAA,IAAI,CAAC,MAAQ,EAAA;AACZ,IAAO,OAAA,IAAA,CAAA;AAAA,GACR;AAEA,EAAO,OAAA,MAAA,CAAA;AACR;;AClEA,MAAM,GAAA,GAAM,CAAC,OAAA,KACZ,CAAmL,gLAAA,EAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEpL,MAAM,IAAI,CAAC,IAAA,EAAc,KACxB,KAAA,CAAA,SAAA,EAAY,6CAA6C,KAAS,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AAEnE,MAAM,MACL,GAAA,yqBAAA,CAAA;AAED,MAAM,MACL,GAAA,gFAAA,CAAA;AAEM,MAAM,8BAAiC,GAAA,GAAA;AAAA,EAC7C;AAAA,IACC,MAAA;AAAA,IACA,CAAA;AAAA;AAAA;AAAA,IAA2F,EAAA,CAAA;AAAA,MAC1F,uCAAA;AAAA,KACD,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiI,EAAA,CAAA;AAAA,MAChI,uBAAA;AAAA,KACD,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA4E,EAAA,CAAA;AAAA,MAC3E,8DAAA;AAAA,KACD,CAAA,CAAA;AAAA,IACA,MAAA;AAAA,GACD,CAAE,KAAK,EAAE,CAAA;AACV;;AClBO,MAAe,YAAmC,CAAA;AAAA,EAAlD,WAAA,GAAA;AACN,IAAA,IAAA,CAAQ,aAEJ,EAAC,CAAA;AAAA,GAAA;AAAA,EAEL,EACC,CAAA,KAAA,EACA,QACA,EAAA,GAAA,GAAqB,IACd,EAAA;AAfT,IAAA,IAAA,EAAA,CAAA;AAgBE,IAAA,IAAA,CAAK,WAAW,KAAS,CAAA,GAAA;AAAA,MACxB,GAAI,CAAA,EAAA,GAAA,IAAA,CAAK,UAAW,CAAA,KAAA,CAAA,KAAhB,YAA0B,EAAC;AAAA,MAC/B,CAAC,UAAU,GAAG,CAAA;AAAA,KACf,CAAA;AAAA,GACD;AAAA,EAEA,GAAA,CACC,OACA,aACO,EAAA;AAzBT,IAAA,IAAA,EAAA,CAAA;AA0BE,IAAA,IAAA,CAAK,WAAW,KAAU,CAAA,GAAA,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,WAAW,KAAhB,CAAA,KAAA,IAAA,GAAA,EAAA,GAA0B,EAAI,EAAA,MAAA;AAAA,MACvD,CAAC,CAAC,QAAA,EAAU,GAAG,CAAA,KACd,OAAO,aAAkB,KAAA,UAAA,GACtB,QAAa,KAAA,aAAA,GACb,GAAQ,KAAA,aAAA;AAAA,KACb,CAAA;AAAA,GACD;AAAA,EAEA,IAAA,CACC,OACA,OACO,EAAA;AArCT,IAAA,IAAA,EAAA,CAAA;AAsCE,IAAA,CAAA,CAAC,EAAK,GAAA,IAAA,CAAA,UAAA,CAAW,KAAhB,CAAA,KAAA,IAAA,GAAA,EAAA,GAA0B,EAAC,EAAG,OAAQ,CAAA,CAAC,QAAa,KAAA,QAAA,CAAS,CAAG,CAAA,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA,GAC1E;AACD;;ACvCO,MAAM,QAAW,GAAA,CAAC,EAAc,EAAA,KAAA,GAAQ,EAAO,KAAA;AACrD,EAAA,IAAI,QAAW,GAAA,CAAA,CAAA;AACf,EAAA,IAAI,KAA+B,GAAA,IAAA,CAAA;AAEnC,EAAA,OAAO,YAA4B,IAAiB,EAAA;AACnD,IAAM,MAAA,GAAA,GAAM,KAAK,GAAI,EAAA,CAAA;AACrB,IAAA,MAAM,QAAQ,GAAM,GAAA,QAAA,CAAA;AAEpB,IAAA,IAAI,SAAS,KAAO,EAAA;AACnB,MAAG,EAAA,CAAA,KAAA,CAAM,MAAM,IAAI,CAAA,CAAA;AACnB,MAAW,QAAA,GAAA,GAAA,CAAA;AAAA,KACL,MAAA;AACN,MAAA,IAAI,KAAO,EAAA;AACV,QAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AAAA,OACnB;AACA,MAAA,KAAA,GAAQ,WAAW,MAAM;AACxB,QAAG,EAAA,CAAA,KAAA,CAAM,MAAM,IAAI,CAAA,CAAA;AACnB,QAAA,QAAA,GAAW,KAAK,GAAI,EAAA,CAAA;AAAA,OACrB,EAAG,QAAQ,KAAK,CAAA,CAAA;AAAA,KACjB;AAAA,GACD,CAAA;AACD,CAAA;;ACrBA,IAAI,OAAO,YAAY,WAAa,EAAA;AACnC,EAAA,UAAA,CAAW,OAAU,GAAA,EAAE,GAAK,EAAA,EAAG,EAAA,CAAA;AAChC,CAAA;AAQa,MAAA,cAAA,GAAiB,OAAQ,CAAA,GAAA,CAAI,QAAa,KAAA,YAAA;;ACOhD,MAAM,qBAAqB,YAAiC,CAAA;AAAA,EA0ClE,YACC,YAA6B,GAAA,sBAAA,EAC7B,EAAA,MAAA,GAAoB,kBACnB,EAAA;AACD,IAAM,KAAA,EAAA,CAAA;AAoLP,IAAA,IAAA,CAAQ,kBAAkB,MAAY;AAErC,MAAI,IAAA,IAAA,CAAK,MAAO,CAAA,MAAA,KAAW,CAAG,EAAA;AAC7B,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAEnB,QAAA,OAAA;AAAA,OACD;AAEA,MAAA,MAAM,UAAa,GAAA,eAAA,CAAgB,IAAK,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAGrD,MAAA,IAAI,CAAC,UAAY,EAAA;AAChB,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAEnB,QAAA,OAAA;AAAA,OACD;AAEA,MAAA,MAAM,YAAe,GAAA,iBAAA,CAAkB,UAAY,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAG9D,MAAA,IAAI,CAAC,YAAc,EAAA;AAClB,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAEnB,QAAA,OAAA;AAAA,OACD;AAEA,MAAM,MAAA,gBAAA,GAAmB,KAAM,CAAA,SAAA,CAAU,OAAQ,CAAA,IAAA;AAAA,QAChD,UAAW,CAAA,QAAA;AAAA,QACX,YAAA;AAAA,OACD,CAAA;AAGA,MAAA,IAAA,CAAK,WAAc,GAAA;AAAA,QAClB,IAAA,EAAM,aAAa,qBAAsB,EAAA;AAAA,QACzC,OAAA,EAAS,IAAK,CAAA,MAAA,CAAO,gBAAkB,CAAA,CAAA,UAAA;AAAA,QACvC,WAAA,EAAc,IAAK,CAAA,MAAA,CAAO,gBAAkC,CAAA,CAAA,SAAA;AAAA,QAC5D,KAAO,EAAA,gBAAA;AAAA,OACR,CAAA;AAAA,KACD,CAAA;AACA,IAAiB,IAAA,CAAA,cAAA,GAAA,QAAA,CAAS,IAAK,CAAA,eAAA,EAAiB,EAAE,CAAA,CAAA;AAWlD,IAAA,IAAA,CAAQ,iCAKE,GAAA,IAAA,CAAA;AAzOT,IAAA,IAAA,CAAK,aAAgB,GAAA,YAAA,CAAA;AACrB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AACpB,IAAA,IAAA,CAAK,QAAW,GAAA,EAAA,CAAA;AAGhB,IAAA,IAAA,CAAK,MAAS,GAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE,EAAA,CAAA;AAAA,GAC5B;AAAA,EArDA,IAAW,aAAa,YAA4B,EAAA;AACnD,IAAA,IAAA,CAAK,aAAgB,GAAA,YAAA,CAAA;AACrB,IAAK,IAAA,CAAA,IAAA,CAAK,qBAAsB,CAAA,YAAA,EAAc,YAAY,CAAA,CAAA;AAAA,GAC3D;AAAA,EACA,IAAW,YAA6B,GAAA;AACvC,IAAA,OAAO,IAAK,CAAA,aAAA,CAAA;AAAA,GACb;AAAA,EAGA,IAAW,OAAO,MAAmB,EAAA;AACpC,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AAEf,IAAA,IAAA,CAAK,OAAU,GAAA,EAAA,CAAA;AAEf,IAAK,IAAA,CAAA,IAAA,CAAK,qBAAsB,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAAA,GAC/C;AAAA,EACA,IAAW,MAAoB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GACb;AAAA,EAGA,IAAW,YAAY,WAAiC,EAAA;AACvD,IAAA,IAAA,CAAK,YAAe,GAAA,WAAA,CAAA;AACpB,IAAK,IAAA,CAAA,IAAA,CAAK,qBAAsB,CAAA,WAAA,EAAa,WAAW,CAAA,CAAA;AAAA,GACzD;AAAA,EACA,IAAW,WAAkC,GAAA;AAC5C,IAAA,OAAO,IAAK,CAAA,YAAA,CAAA;AAAA,GACb;AAAA,EAGA,IAAW,QAAQ,OAAiB,EAAA;AACnC,IAAA,IAAA,CAAK,QAAW,GAAA,OAAA,CAAA;AAChB,IAAK,IAAA,CAAA,IAAA,CAAK,qBAAsB,CAAA,OAAA,EAAS,OAAO,CAAA,CAAA;AAAA,GACjD;AAAA,EACA,IAAW,OAAkB,GAAA;AAC5B,IAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAAA,GACb;AAAA,EAmBA,MAAM,KAAK,KAAoD,EAAA;AAE9D,IAAA,IAAA,CAAK,aAAgB,GAAA,MAAM,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAE1C,IAAA,IAAI,cAAgB,EAAA;AAEnB,MAAA,MAAM,KAAK,wBAAyB,EAAA,CAAA;AAAA,KACrC;AAEA,IAAA,IAAA,CAAK,mBAAoB,EAAA,CAAA;AAGzB,IAAA,IAAA,CAAK,IAAK,CAAA,qBAAA,CAAsB,YAAc,EAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAGhE,IAAO,MAAA,CAAA,gBAAA,CAAiB,WAAa,EAAA,CAAC,KAAU,KAAA;AAC/C,MAAA,IAAA,CAAK,SAAS,EAAE,CAAA,EAAG,MAAM,OAAS,EAAA,CAAA,EAAG,MAAM,OAAQ,EAAA,CAAA;AAAA,KACnD,CAAA,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,KAAK,KAA4D,EAAA;AACtE,IAAI,IAAA;AACH,MAAA,MAAM,MAAM,OAAO,OAAO,KAAU,KAAA,UAAA,GAAa,OAAU,GAAA,KAAA,CAAA,CAAA;AAE3D,MAAM,MAAA,GAAA,GAAM,kBAAmB,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AAEzC,MAAI,IAAA,GAAA,CAAI,SAAS,MAAQ,EAAA;AACxB,QAAQ,OAAA,CAAA,KAAA,CAAM,IAAI,IAAI,CAAA,CAAA;AAEtB,QAAA,MAAM,IAAI,KAAA;AAAA,UACT,+EAAA;AAAA,SACD,CAAA;AAAA,OACD;AAEA,MAAO,OAAA;AAAA,QACN,MAAM,GAAI,CAAA,KAAA;AAAA,QACV,QAAQ,kBAAmB,CAAA,MAAA;AAAA,QAC3B,KAAO,EAAA,IAAA;AAAA,OACR,CAAA;AAAA,aACQ,KAAP,EAAA;AACD,MAAA,OAAA,CAAQ,MAAM,KAAK,CAAA,CAAA;AAEnB,MAAO,OAAA;AAAA,QACN,IAAM,EAAA,IAAA;AAAA,QACN,QAAQ,kBAAmB,CAAA,KAAA;AAAA,QAC3B,KAAA;AAAA,OACD,CAAA;AAAA,KACD;AAAA,GACD;AAAA,EAEA,MAAM,OAAO,KAAoD,EAAA;AAChE,IAAA,IAAA,CAAK,YAAe,GAAA,MAAM,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACzC,IAAA,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAAA,GACvB;AAAA,EAEQ,kBACP,UACiE,EAAA;AApInE,IAAA,IAAA,EAAA,CAAA;AAqIE,IAAA,IAAI,IAAK,CAAA,YAAA,CAAa,MAAW,KAAA,kBAAA,CAAmB,KAAO,EAAA;AAC1D,MAAA,MAAA,CACC,UAAK,YAAa,CAAA,KAAA,KAAlB,IACA,GAAA,EAAA,GAAA,IAAI,MAAM,2DAA2D,CAAA,CAAA;AAAA,KAEvE,MAAA,IACC,KAAK,YAAa,CAAA,MAAA,KAAW,mBAAmB,OAChD,IAAA,CAAC,IAAK,CAAA,YAAA,CAAa,IAClB,EAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACT,CAAkB,eAAA,EAAA,UAAA,CAAA,mFAAA,CAAA;AAAA,OACnB,CAAA;AAAA,KACD;AAAA,GACD;AAAA,EAEA,YAAiC,GAAA;AAChC,IAAA,IAAA,CAAK,kBAAkB,cAAc,CAAA,CAAA;AAErC,IAAA,OAAO,MAAO,CAAA,OAAA,CAAQ,IAAK,CAAA,YAAA,CAAa,IAAI,CAAE,CAAA,GAAA;AAAA,MAC7C,CAAC,CAAC,WAAa,EAAA,OAAO,CAAM,KAAA;AAC3B,QAAA,MAAM,WAAW,OAAQ,CAAA,UAAA,CAAA;AAEzB,QAAO,OAAA;AAAA,UACN,IAAM,EAAA,WAAA;AAAA,UACN,QAAQ,MAAO,CAAA,MAAA,CAAO,QAAQ,CAAE,CAAA,GAAA,CAAI,CAAC,KAAU,KAAA;AAC9C,YAAO,OAAA;AAAA,cACN,IAAI,KAAM,CAAA,EAAA;AAAA,cACV,IAAA,EAAM,KAAM,CAAA,IAAA,IAAQ,KAAM,CAAA,EAAA;AAAA,cAC1B,YAAY,KAAM,CAAA,KAAA,CAAM,UAAW,CAAA,GAAA,CAAI,CAAC,SAAc,KAAA;AACrD,gBAAO,OAAA;AAAA,kBACN,IAAI,SAAU,CAAA,EAAA;AAAA,kBACd,IAAA,EAAM,SAAU,CAAA,IAAA,IAAQ,SAAU,CAAA,EAAA;AAAA,iBACnC,CAAA;AAAA,eACA,CAAA;AAAA,aACF,CAAA;AAAA,WACA,CAAA;AAAA,SACF,CAAA;AAAA,OACD;AAAA,KACD,CAAA;AAAA,GACD;AAAA,EAEA,QAAwD,GAAA;AACvD,IAAA,IAAA,CAAK,kBAAkB,UAAU,CAAA,CAAA;AAEjC,IAAO,OAAA,MAAA,CAAO,OAAO,IAAK,CAAA,YAAA,CAAa,IAAI,CAAE,CAAA,MAAA,CAE3C,CAAC,GAAA,EAAK,OAAY,KAAA;AACnB,MAAA,MAAM,WAAW,OAAQ,CAAA,UAAA,CAAA;AAEzB,MAAA,MAAA,CAAO,MAAO,CAAA,QAAQ,CAAE,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AAC1C,QAAI,GAAA,CAAA,KAAA,CAAM,EAAM,CAAA,GAAA,MAAA,CAAO,MAAO,CAAA,KAAA,CAAM,KAAK,CAAE,CAAA,MAAA,CAEzC,CAACC,IAAAA,EAAK,IAAS,KAAA;AAEhB,UAAAA,IAAAA,CAAI,KAAK,SAAa,CAAA,GAAA,IAAA,CAAA;AAEtB,UAAOA,OAAAA,IAAAA,CAAAA;AAAA,SACR,EAAG,EAAE,CAAA,CAAA;AAAA,OACL,CAAA,CAAA;AAED,MAAO,OAAA,GAAA,CAAA;AAAA,KACR,EAAG,EAAE,CAAA,CAAA;AAAA,GACN;AAAA,EAEA,MAAM,wBAA0C,GAAA;AAE/C,IAAK,IAAA,CAAA,wBAAA;AAAA,MACJ,IAAK,CAAA,YAAA,EACH,CAAA,GAAA,CAAI,CAAC,OAAY,KAAA;AACjB,QAAA,OAAO,OAAQ,CAAA,MAAA,CAAO,GAAI,CAAA,CAAC,KAAU,KAAA;AACpC,UAAO,OAAA;AAAA,YACN,SAAS,KAAM,CAAA,EAAA;AAAA,YACf,WAAA,EAAa,KAAM,CAAA,UAAA,CAAW,CAAG,CAAA,CAAA,EAAA;AAAA,WAClC,CAAA;AAAA,SACA,CAAA,CAAA;AAAA,OACD,EACA,IAAK,EAAA;AAAA,KACR,CAAA;AACA,IAAA,MAAM,IAAI,OAAQ,CAAA,CAAC,YAAY,UAAW,CAAA,OAAA,EAAS,CAAC,CAAC,CAAA,CAAA;AACrD,IAAA,IAAA,CAAK,SAAS,EAAC,CAAA;AAAA,GAChB;AAAA,EAKA,mBAA4B,GAAA;AAC3B,IAAA,IAAA,CAAK,kBAAkB,qBAAqB,CAAA,CAAA;AAE5C,IAAI,IAAA,OAAO,WAAW,WAAa,EAAA;AAClC,MAAA,MAAM,GAAM,GAAA,IAAI,GAAI,CAAA,MAAA,CAAO,SAAS,IAAI,CAAA,CAAA;AAExC,MAAI,IAAA,GAAA,CAAI,aAAa,GAAI,CAAA,KAAK,KAAK,GAAI,CAAA,YAAA,CAAa,GAAI,CAAA,KAAK,CAAG,EAAA;AAC/D,QAAA,IAAA,CAAK,wBAAyB,CAAA;AAAA,UAC7B;AAAA,YAEC,OAAS,EAAA,GAAA,CAAI,YAAa,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,YAEnC,WAAa,EAAA,GAAA,CAAI,YAAa,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,WACxC;AAAA,SACA,CAAA,CAAA;AAAA,OACF;AAAA,KACD;AAAA,GACD;AAAA,EAGA,gBAAyB,GAAA;AACxB,IAAA,IAAI,KAAK,iCAAmC,EAAA;AAC3C,MAAK,IAAA,CAAA,wBAAA,CAAyB,KAAK,iCAAiC,CAAA,CAAA;AAAA,KACrE;AAAA,GACD;AAAA,EA2CA,aAAa,MAAyB,EAAA;AAErC,IAAA,IAAA,CAAK,iCAAoC,GAAA,IAAA,CAAA;AAGzC,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAAA,GACf;AAAA,EASA,yBACC,MAIO,EAAA;AACP,IAAA,IAAA,CAAK,iCAAoC,GAAA,MAAA,CAAA;AAEzC,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA,CAAA;AAE5B,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CACZ,GAAI,CAAA,CAAC,KAAU,KAAA;AACf,MAAA,MAAM,UAAU,KAAM,CAAA,OAAA,CAAA;AACtB,MAAA,MAAM,cAAc,KAAM,CAAA,WAAA,CAAA;AAE1B,MAAA,IAAI,OAAW,IAAA,KAAA,IAAS,WAAe,IAAA,KAAA,CAAM,OAAU,CAAA,EAAA;AACtD,QAAA,OAAO,MAAM,OAAS,CAAA,CAAA,WAAA,CAAA,CAAA;AAAA,OACvB;AAAA,KACA,CACA,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAAA,GACjB;AACD;;AChTO,MAAM,WAAY,CAAA;AAAA,EAKxB,YACC,YAA6B,GAAA,sBAAA,EAC7B,EAAA,MAAA,GAAoB,kBACnB,EAAA;AACD,IAAA,IAAA,CAAK,YAAe,GAAA,IAAI,YAAa,CAAA,YAAA,EAAc,MAAM,CAAA,CAAA;AACzD,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,YAAe,GAAA,KAAA,CAAA;AAAA,GACrB;AAAA,EAEA,MAAM,KAAK,KAAqC,EAAA;AAE/C,IAAA,IAAI,KAAK,YAAc,EAAA;AACtB,MAAM,MAAA,IAAA,CAAK,YAAa,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAEpC,MAAA,OAAA;AAAA,KACM,MAAA;AACN,MAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AAAA,KACrB;AAGA,IAAM,MAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAGlC,IAAI,IAAA;AACH,MAAA,MAAM,KAAK,QAAS,EAAA,CAAA;AAAA,aACZ,KAAP,EAAA;AACD,MACC,IAAA,KAAA,YAAiB,SACjB,KAAM,CAAA,OAAA,KAAY,qDAClB,CAAC,IAAA,CAAK,YAAa,CAAA,MAAA,CAAO,MACzB,EAAA;AAED,QAAA,IAAA,CAAK,aAAa,OAAU,GAAA,8BAAA,CAAA;AAAA,OAC7B;AACA,MAAA,OAAA,CAAQ,MAAM,KAAK,CAAA,CAAA;AAEnB,MAAA,OAAA;AAAA,KACD;AAGA,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AAAA,GACrB;AAAA,EAEA,MAAc,QAA0B,GAAA;AAEvC,IAAK,IAAA,CAAA,IAAA,GAAO,IAAIC,8BAAa,CAAA;AAAA,MAC5B,CAACC,mCAAA,CAAkB,YAAe,GAAA,CAAC,MAAM,GAAQ,KAAA;AAChD,QAAA,OAAO,GAAI,CAAA,OAAA,CAAQ,IAAK,CAAA,YAAA,CAAa,cAAc,CAAA,CAAA;AAAA,OACpD;AAAA,MACA,CAACA,mCAAA,CAAkB,YAAe,GAAA,CAAC,KAAK,GAAQ,KAAA;AAC/C,QAAK,IAAA,CAAA,YAAA,CAAa,YAAa,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAEvC,QAAA,OAAO,IAAI,OAAQ,EAAA,CAAA;AAAA,OACpB;AAAA,MACA,CAACA,mCAAA,CAAkB,wBAA2B,GAAA,CAAC,KAAK,GAAQ,KAAA;AAC3D,QAAK,IAAA,CAAA,YAAA,CAAa,wBAAyB,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAEnD,QAAA,OAAO,IAAI,OAAQ,EAAA,CAAA;AAAA,OACpB;AAAA,MACA,CAACA,mCAAA,CAAkB,aAAgB,GAAA,CAAC,KAAK,GAAQ,KAAA;AAjFpD,QAAA,IAAA,EAAA,CAAA;AAmFI,QAAI,IAAA,GAAA,CAAI,IAAK,CAAA,UAAA,GAAa,CAAG,EAAA;AAC5B,UAAO,OAAA,GAAA,CAAI,KAAM,CAAA,0BAAA,EAA4B,GAAG,CAAA,CAAA;AAAA,mBACtC,GAAI,CAAA,IAAA,CAAK,cAAc,IAAK,CAAA,YAAA,CAAa,OAAO,MAAQ,EAAA;AAClE,UAAA,OAAO,GAAI,CAAA,KAAA;AAAA,YACV,CAAA,yBAAA,EAA4B,IAAK,CAAA,YAAA,CAAa,MAAO,CAAA,MAAA,CAAA,mCAAA,CAAA;AAAA,YACrD,GAAA;AAAA,WACD,CAAA;AAAA,SACD;AAEA,QAAA,MAAM,UAAa,GAAA,eAAA,CAAgB,IAAK,CAAA,YAAA,CAAa,OAAO,MAAM,CAAA,CAAA;AAClE,QAAA,IAAI,CAAC,UAAY,EAAA;AAChB,UAAO,OAAA,GAAA,CAAI,KAAM,CAAA,gCAAA,EAAkC,GAAG,CAAA,CAAA;AAAA,SACvD;AAGA,QAAA,IAAA,CAAK,aAAa,WAAc,GAAA,IAAA,CAAA;AAEhC,QAAA,MAAM,MAAS,GAAA,UAAA,CAAW,QAAS,CAAA,GAAA,CAAI,IAAK,CAAA,UAAA,CAAA,CAAA;AAC5C,QAAA,IAAI,CAAC,MAAQ,EAAA;AACZ,UAAA,OAAO,GAAI,CAAA,KAAA;AAAA,YACV,CAAA,6EAAA,CAAA;AAAA,YACA,GAAA;AAAA,WACD,CAAA;AAAA,SACD;AAGA,QAAA,MAAA,CAAO,cAAe,CAAA;AAAA,UACrB,QAAA,EAAU,IAAI,IAAK,CAAA,QAAA;AAAA,UACnB,KAAA,EAAO,IAAI,IAAK,CAAA,KAAA;AAAA,UAChB,MAAA,EAAQ,IAAI,IAAK,CAAA,MAAA;AAAA,SACjB,CAAA,CAAA;AAGD,QAAK,CAAA,CAAA,EAAA,GAAA,IAAA,CAAA,IAAA,KAAL,mBAAW,OAAQ,CAAA,cAAA,KAClB,WAAW,IAAK,CAAA,YAAA,CAAa,gBAAgB,GAAG,CAAA,CAAA;AAEjD,QAAA,OAAO,IAAI,OAAQ,EAAA,CAAA;AAAA,OACpB;AAAA,KACA,CAAA,CAAA;AAGD,IAAM,MAAA,IAAA,CAAK,KAAK,KAAM,EAAA,CAAA;AAAA,GACvB;AAAA,EAEQ,cAAuB,GAAA;AAE9B,IAAO,MAAA,CAAA,gBAAA,CAAiB,aAAa,MAAM;AAjI7C,MAAA,IAAA,EAAA,CAAA;AAkIG,MAAA,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,SAAL,IAAW,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,cAAkB,KAAA,IAAA,CAAK,aAAa,cAAe,EAAA,CAAA;AAAA,KACtE,CAAA,CAAA;AAED,IAAO,MAAA,CAAA,gBAAA,CAAiB,UAAU,MAAM;AArI1C,MAAA,IAAA,EAAA,CAAA;AAsIG,MAAA,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,SAAL,IAAW,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,cAAkB,KAAA,IAAA,CAAK,aAAa,cAAe,EAAA,CAAA;AAAA,KACtE,CAAA,CAAA;AACD,IAAO,MAAA,CAAA,gBAAA,CAAiB,cAAc,MAAM;AAxI9C,MAAA,IAAA,EAAA,CAAA;AAyIG,MAAK,CAAA,CAAA,EAAA,GAAA,IAAA,CAAA,IAAA,KAAL,mBAAW,OAAQ,CAAA,cAAA,KAClB,WAAW,IAAK,CAAA,YAAA,CAAa,gBAAgB,GAAG,CAAA,CAAA;AAAA,KACjD,CAAA,CAAA;AAGD,IAAA,IAAA,CAAK,YAAa,CAAA,EAAA,CAAG,qBAAsB,CAAA,MAAA,EAAQ,MAAM;AA9I3D,MAAA,IAAA,EAAA,CAAA;AA+IG,MAAA,CAAA,CAAA,EAAA,GAAA,IAAA,CAAK,SAAL,IAAW,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,cAAkB,KAAA,IAAA,CAAK,aAAa,cAAe,EAAA,CAAA;AAAA,KACtE,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,YAAa,CAAA,EAAA;AAAA,MACjB,qBAAsB,CAAA,WAAA;AAAA,MACtB,OAAO,WAAgB,KAAA;AACtB,QAAA,IAAI,KAAK,IAAM,EAAA;AACd,UAAI,IAAA;AACH,YAAM,MAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,WAAW,CAAA,CAAA;AAAA,mBAClC,KAAP,EAAA;AAED,YAAA,IACC,KAAiB,YAAAC,+BAAA,IACjB,KAAM,CAAA,QAAA,CAAS,WAAW,GACzB,EAAA;AACD,cAAQ,OAAA,CAAA,KAAA,CAAM,MAAM,QAAQ,CAAA,CAAA;AAAA,aACtB,MAAA;AACN,cAAM,MAAA,KAAA,CAAA;AAAA,aACP;AAAA,WACD;AAAA,SACD;AAAA,OACD;AAAA,KACD,CAAA;AAAA,GACD;AACD;;ACvKa,MAAA,mBAAA,GAAsB,CAAC,KAAuB,KAAA;AAC1D,EAAA,KAAA,CAAM,cAAe,EAAA,CAAA;AACrB,EAAA,KAAA,CAAM,eAAgB,EAAA,CAAA;AACvB,EAAA;AAEa,MAAA,cAAA,GAAiB,CAC7B,KACU,KAAA;AACV,EAAA,IACC,KAAM,CAAA,IAAA,IACN,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,CAAC,CAAA,CAAE,IAAK,CAAA,CAAC,EAAO,KAAA,EAAA,YAAc,iBAAiB,CAClE,EAAA;AACD,IAAA,KAAA,CAAM,cAAe,EAAA,CAAA;AACrB,IAAA,KAAA,CAAM,eAAgB,EAAA,CAAA;AAAA,GACvB;AACD;;;;;;;;;;;;;;;;;;"}