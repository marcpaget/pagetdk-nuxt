import { SliceZone, SharedSlice } from '@prismicio/types';
import { ActiveSlice, LibrarySummary } from '@prismicio/slice-simulator-com';
import * as t from 'io-ts';

type Listener<T> = (event: T) => void;
type EventMap = {
    [K in string]: unknown;
};
declare abstract class EventEmitter<TEventMap = EventMap> {
    private _listeners;
    on<TEventType extends keyof TEventMap>(event: TEventType, listener: Listener<TEventMap[TEventType]>, key?: string | null): void;
    off<TEventType extends keyof TEventMap>(event: TEventType, listenerOrKey: Listener<TEventMap[TEventType]> | string): void;
    emit<TEventType extends keyof TEventMap>(event: TEventType, payload: TEventMap[TEventType]): void;
}

declare const LibrariesStateLike: t.RecordC<t.StringC, t.IntersectionC<[t.PartialC<{
    name: t.StringC;
}>, t.TypeC<{
    components: t.RecordC<t.StringC, t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        model: t.IntersectionC<[t.TypeC<{
            id: t.StringC;
            variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
                id: t.StringC;
            }>, t.PartialC<{
                name: t.StringC;
            }>]>>;
        }>, t.PartialC<{
            name: t.StringC;
        }>]>;
        mocks: t.RecordC<t.StringC, t.TypeC<{
            variation: t.StringC;
        }>>;
    }>, t.PartialC<{
        name: t.StringC;
    }>]>>;
}>]>>;
type LibrariesStateLike = t.TypeOf<typeof LibrariesStateLike>;
declare enum StateManagerEventType {
    ManagedState = "managedState",
    Slices = "slices",
    ActiveSlice = "activeSlice",
    Message = "message"
}
type StateManagerEvents = {
    [StateManagerEventType.ManagedState]: ManagedState;
    [StateManagerEventType.Slices]: SliceZone;
    [StateManagerEventType.ActiveSlice]: ActiveSlice | null;
    [StateManagerEventType.Message]: string;
};
declare enum StateManagerStatus {
    Pending = "pending",
    Loaded = "loaded",
    Error = "error"
}
type ManagedState = {
    data: LibrariesStateLike | null;
    status: StateManagerStatus;
    error: Error | null;
};
interface SliceSimulatorProps {
    state?: (() => Promise<LibrariesStateLike>) | Promise<LibrariesStateLike> | LibrariesStateLike;
    zIndex?: number;
    background?: string;
}
interface SliceSimulatorState {
    coreManager: CoreManager;
    managedState: ManagedState;
    slices: SliceZone;
    message: string;
}
type SliceSimulatorOptions = SliceSimulatorProps & SliceSimulatorState;

declare class StateManager extends EventEmitter<StateManagerEvents> {
    private _managedState;
    set managedState(managedState: ManagedState);
    get managedState(): ManagedState;
    private _slices;
    set slices(slices: SliceZone);
    get slices(): SliceZone;
    private _activeSlice;
    set activeSlice(activeSlice: ActiveSlice | null);
    get activeSlice(): ActiveSlice | null;
    private _message;
    set message(message: string);
    get message(): string;
    private _mouse;
    constructor(managedState?: ManagedState, slices?: SliceZone);
    init(state: SliceSimulatorProps["state"]): Promise<void>;
    load(state: SliceSimulatorProps["state"]): Promise<ManagedState>;
    reload(state: SliceSimulatorProps["state"]): Promise<void>;
    private _throwIfNotLoaded;
    getLibraries(): LibrarySummary[];
    getMocks(): Record<string, Record<string, SharedSlice>>;
    forceSliceChunksDownload(): Promise<void>;
    /**
     * Set default SliceZone according to URL query parameters (lid, sid, vid)
     */
    setDefaultSliceZone(): void;
    recoverSliceZone(): void;
    private _setActiveSlice;
    setActiveSlice: (this: unknown, ...args: unknown[]) => void;
    setSliceZone(slices: SliceZone): void;
    private _setSliceZoneFromSliceIDsLastCall;
    setSliceZoneFromSliceIDs(slices: {
        sliceID: string;
        variationID: string;
    }[]): void;
}

declare class CoreManager {
    stateManager: StateManager;
    private _api;
    private _initialized;
    constructor(managedState?: ManagedState, slices?: SliceZone);
    init(state: SliceSimulatorProps["state"]): Promise<void>;
    private _initAPI;
    private _initListeners;
}

declare const getDefaultProps: () => Required<{
    state?: NonNullable<{
        [x: string]: {
            name?: string | undefined;
        } & {
            components: {
                [x: string]: {
                    id: string;
                    model: {
                        id: string;
                        variations: ({
                            id: string;
                        } & {
                            name?: string | undefined;
                        })[];
                    } & {
                        name?: string | undefined;
                    };
                    mocks: {
                        [x: string]: {
                            variation: string;
                        };
                    };
                } & {
                    name?: string | undefined;
                };
            };
        };
    } | Promise<{
        [x: string]: {
            name?: string | undefined;
        } & {
            components: {
                [x: string]: {
                    id: string;
                    model: {
                        id: string;
                        variations: ({
                            id: string;
                        } & {
                            name?: string | undefined;
                        })[];
                    } & {
                        name?: string | undefined;
                    };
                    mocks: {
                        [x: string]: {
                            variation: string;
                        };
                    };
                } & {
                    name?: string | undefined;
                };
            };
        };
    }> | (() => Promise<{
        [x: string]: {
            name?: string | undefined;
        } & {
            components: {
                [x: string]: {
                    id: string;
                    model: {
                        id: string;
                        variations: ({
                            id: string;
                        } & {
                            name?: string | undefined;
                        })[];
                    } & {
                        name?: string | undefined;
                    };
                    mocks: {
                        [x: string]: {
                            variation: string;
                        };
                    };
                } & {
                    name?: string | undefined;
                };
            };
        };
    }>) | undefined> | undefined;
    zIndex?: number | undefined;
    background?: string | undefined;
}>;
declare const getDefaultManagedState: () => ManagedState;
declare const getDefaultSlices: () => SliceZone;
declare const getDefaultMessage: () => string;

declare const simulatorClass = "slice-simulator";
declare const simulatorRootClass = "slice-simulator--root";
declare const getSliceZoneDOM: (expectedNumberOfChildren: number) => Element | null;
declare const getActiveSliceDOM: ($sliceZone: Element, mouse: {
    x: number;
    y: number;
}) => Element | null;

declare const disableEventHandler: (event: Event) => void;
declare const onClickHandler: (event: MouseEvent & {
    path?: HTMLElement[];
}) => void;

declare const sliceSimulatorAccessedDirectly: string;

export { CoreManager, ManagedState, SliceSimulatorOptions, SliceSimulatorProps, SliceSimulatorState, StateManager, StateManagerEventType, StateManagerEvents, StateManagerStatus, disableEventHandler, getActiveSliceDOM, getDefaultManagedState, getDefaultMessage, getDefaultProps, getDefaultSlices, getSliceZoneDOM, onClickHandler, simulatorClass, simulatorRootClass, sliceSimulatorAccessedDirectly };
