"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorModeLocalStorageKey = exports.Inkline = void 0;
exports.createPrototype = createPrototype;
exports.inklineGlobals = exports.handleColorMode = exports.defaultOptions = void 0;
var _vue = require("vue");
var _helpers = require("@inkline/inkline/helpers");
var _validation = require("@inkline/inkline/validation");
var _i18n = require("@inkline/inkline/i18n");
var inklineIcons = _interopRequireWildcard(require("@inkline/inkline/icons"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const colorModeLocalStorageKey = "inkline-color-mode";
exports.colorModeLocalStorageKey = colorModeLocalStorageKey;
const handleColorMode = colorMode => {
  let color;
  if (colorMode === "system") {
    color = matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  } else {
    color = colorMode;
  }
  (0, _helpers.removeClass)(document.body, "-light -dark");
  (0, _helpers.addClass)(document.body, `-${color}`);
};
exports.handleColorMode = handleColorMode;
const defaultOptions = {
  components: {},
  icons: {},
  colorMode: "system",
  locale: "en",
  validateOn: ["input", "blur"],
  color: "",
  size: "",
  routerComponent: "router-link",
  componentOptions: {}
};
exports.defaultOptions = defaultOptions;
function createPrototype({
  icons,
  components,
  ...options
}) {
  return {
    form(schema) {
      return (0, _validation.initialize)(schema);
    },
    setLocale(locale) {
      (0, _i18n.setLocale)(locale);
    },
    options: (0, _vue.reactive)(options)
  };
}
const inklineGlobals = {
  prototype: void 0,
  icons: void 0
};
exports.inklineGlobals = inklineGlobals;
const Inkline = {
  install(app, options = {}) {
    const extendedOptions = {
      ...defaultOptions,
      ...options
    };
    for (const componentIndex in extendedOptions.components) {
      app.component(extendedOptions.components[componentIndex].name, extendedOptions.components[componentIndex]);
    }
    if (typeof window !== "undefined") {
      const storedColorMode = localStorage.getItem(colorModeLocalStorageKey);
      if (storedColorMode) {
        extendedOptions.colorMode = storedColorMode;
      }
    }
    const prototype = createPrototype(extendedOptions);
    inklineGlobals.prototype = prototype;
    app.config.globalProperties.$inkline = prototype;
    app.provide("inkline", prototype);
    const icons = {
      ...inklineIcons,
      ...extendedOptions.icons
    };
    app.provide("inklineIcons", icons);
    if (typeof window !== "undefined") {
      (0, _vue.watch)(() => prototype.options.colorMode, colorMode => {
        handleColorMode(colorMode);
        localStorage.setItem(colorModeLocalStorageKey, colorMode);
      });
      const onDarkModeMediaQueryChange = () => {
        if (prototype.options.colorMode === "system") {
          handleColorMode(prototype.options.colorMode);
        }
      };
      const darkModeMediaQuery = matchMedia("(prefers-color-scheme: dark)");
      if (darkModeMediaQuery.addEventListener) {
        darkModeMediaQuery.addEventListener("change", onDarkModeMediaQueryChange);
      } else {
        darkModeMediaQuery.addListener(onDarkModeMediaQueryChange);
      }
      (0, _helpers.addClass)(document.body, "inkline");
      handleColorMode(extendedOptions.colorMode);
    }
  }
};
exports.Inkline = Inkline;