declare const _default: import("vue").DefineComponent<{
    /**
     * The color variant of the form group
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the form group
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Display the form group as inline
     * @type Boolean
     * @default false
     * @name inline
     */
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The identifier of the form group
     * @type String
     * @default
     * @name name
     */
    name: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The readonly state of the form group
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The required state of the form group
     * @type Boolean
     * @default false
     * @name required
     */
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the form group
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}, unknown, unknown, {
    classes(): Classes;
}, {
    onBlur(name: string, event: InputElementEvent): void;
    onInput(name: string, value: any): void;
}, any, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The color variant of the form group
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the form group
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Display the form group as inline
     * @type Boolean
     * @default false
     * @name inline
     */
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The identifier of the form group
     * @type String
     * @default
     * @name name
     */
    name: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The readonly state of the form group
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The required state of the form group
     * @type Boolean
     * @default false
     * @name required
     */
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the form group
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}>>, {
    color: string;
    size: string;
    required: boolean;
    name: string;
    disabled: boolean;
    readonly: boolean;
    inline: boolean;
}>;
export default _default;
