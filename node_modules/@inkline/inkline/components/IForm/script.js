"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;
var _vue = require("vue");
var _helpers = require("@inkline/inkline/helpers");
var _mixins = require("@inkline/inkline/mixins");
var _validation = require("@inkline/inkline/validation");
const componentName = "IForm";
var _default = (0, _vue.defineComponent)({
  name: componentName,
  mixins: [_mixins.FormComponentMixin],
  provide() {
    return {
      form: this
    };
  },
  inheritAttrs: false,
  props: {
    /**
     * The color variant of the form
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
      type: String,
      default: ""
    },
    /**
     * The disabled state of the form
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
      type: Boolean,
      default: false
    },
    /**
     * Display the form as inline
     * @type Boolean
     * @default false
     * @name inline
     */
    inline: {
      type: Boolean,
      default: false
    },
    /**
     * The loading state of the form
     * @type Boolean
     * @default false
     * @name loading
     */
    loading: {
      type: Boolean,
      default: false
    },
    /**
     * The unique identifier of the form
     * @type String
     * @default uid()
     * @name name
     */
    name: {
      type: String,
      default() {
        return (0, _helpers.uid)("form");
      }
    },
    /**
     * Used to set the form schema
     * @type Boolean
     * @default false
     * @name modelValue
     */
    modelValue: {
      type: Object,
      default: () => null
    },
    /**
     * The readonly state of the form
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
      type: Boolean,
      default: false
    },
    /**
     * The size variant of the form
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    }
  },
  emits: [
  /**
   * Event emitted for setting the modelValue schema
   * @event update:modelValue
   */
  "update:modelValue",
  /**
   * Event emitted for submitting the form
   * @event submit
   */
  "submit"],
  computed: {
    classes() {
      return {
        ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size),
        "-disabled": this.isDisabled,
        "-readonly": this.isReadonly,
        "-inline": this.inline
      };
    },
    schema() {
      if (this.modelValue) {
        return this.modelValue;
      }
      return (0, _helpers.getValueByPath)(this.formGroup.schema || this.form.schema || {}, this.name);
    }
  },
  methods: {
    onBlur(name, event) {
      this.parent.onBlur?.(this.name ? `${this.name}.${name}` : name, event);
      if (this.modelValue) {
        let schema = (0, _helpers.clone)(this.modelValue);
        schema = (0, _helpers.setValuesAlongPath)(schema, name, {
          untouched: false,
          touched: true
        });
        if (this.shouldValidate(name, "blur")) {
          schema = (0, _validation.validate)(schema);
        }
        this.$emit("update:modelValue", schema);
      }
    },
    onInput(name, value) {
      this.parent.onInput?.(this.name ? `${this.name}.${name}` : name, value);
      if (this.modelValue) {
        let schema = (0, _helpers.clone)(this.modelValue);
        schema = (0, _helpers.setValueByPath)(schema, name, "value", value);
        schema = (0, _helpers.setValuesAlongPath)(schema, name, {
          pristine: false,
          dirty: true
        });
        if (this.shouldValidate(name, "input")) {
          schema = (0, _validation.validate)(schema);
        }
        this.$emit("update:modelValue", schema);
      }
    },
    onSubmit(event) {
      event.preventDefault();
      if (this.modelValue) {
        let schema = (0, _helpers.clone)(this.modelValue);
        schema = (0, _helpers.setValuesAlongPath)((0, _validation.validate)(schema), "", {
          untouched: false,
          touched: true
        });
        this.$emit("update:modelValue", schema);
        if (schema.invalid) {
          return;
        }
      }
      this.$emit("submit", event);
    },
    shouldValidate(path, eventName) {
      const targetSchema = (0, _helpers.getValueByPath)(this.modelValue, path);
      const events = targetSchema.validateOn ? [].concat(targetSchema.validateOn) : this.$inkline.options.validateOn;
      return events.includes(eventName);
    }
  }
});
module.exports = _default;