declare const _default: import("vue").DefineComponent<{
    /**
     * The color variant of the progress component
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The value to consider as the 0% starting point
     * @type Number
     * @default 0
     * @name min
     */
    min: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The value to consider as the 100% ending point
     * @type Number
     * @default 100
     * @name max
     */
    max: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The size variant of the progress component
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}, unknown, unknown, {
    classes(): Classes;
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The color variant of the progress component
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The value to consider as the 0% starting point
     * @type Number
     * @default 0
     * @name min
     */
    min: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The value to consider as the 100% ending point
     * @type Number
     * @default 100
     * @name max
     */
    max: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The size variant of the progress component
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}>>, {
    color: string;
    size: string;
    max: string | number;
    min: string | number;
}>;
export default _default;
