"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;
var _vue = require("vue");
var _mixins = require("@inkline/inkline/mixins");
var _helpers = require("@inkline/inkline/helpers");
const componentName = "IIcon";
var _default = (0, _vue.defineComponent)({
  name: componentName,
  inheritAttrs: false,
  props: {
    /**
     * @description The icon to be displayed
     * @type String
     * @default
     * @name name
     */
    name: {
      type: String,
      default: ""
    },
    /**
     * The size variant of the icon
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    }
  },
  setup(props) {
    const icons = (0, _vue.inject)("inklineIcons");
    const iconName = (0, _vue.computed)(() => (0, _helpers.toCamelCase)(props.name));
    const icon = (0, _vue.computed)(() => icons[iconName.value]);
    const classes = (0, _vue.computed)(() => ({
      "inkline-icon": true,
      [`-${props.size}`]: Boolean(props.size)
    }));
    (0, _vue.onMounted)(() => {
      if (iconName.value && !icons[iconName.value]) {
        console.error(`The icon ${iconName.value} is not registered.`);
      }
    });
    return () => (0, _vue.h)("svg", {
      class: classes.value,
      ...icon.value?.attributes
    }, (0, _helpers.renderSvg)(icon.value?.children || []));
  }
});
module.exports = _default;