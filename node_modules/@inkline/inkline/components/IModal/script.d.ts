declare const _default: import("vue").DefineComponent<{
    /**
     * Determines if the modal should close when pressing escape
     * @type Boolean
     * @default true
     * @name closeOnPressEscape
     */
    closeOnPressEscape: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The aria-label attribute of the close button
     * @type String
     * @default Close
     * @name closeAriaLabel
     */
    closeAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The color variant of the modal
     * @type primary | success | light | dark | info | success | warning | danger
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the modal
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Determines if the modal should close when clicking the overlay
     * @type Boolean
     * @default true
     * @name hideOnClickOutside
     */
    hideOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The identifier of the modal
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: StringConstructor;
        default(): string;
    };
    /**
     * Determines if the close icon should be visible in the modal header
     * @type Boolean
     * @default false
     * @name showClose
     */
    showClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the modal
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
    /**
     * Used to determine if modal is visible or not
     * @type Boolean
     * @default false
     * @name modelValue
     */
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The modal opening and closing animation
     * @type fade-in-transition | fade-in-linear-transition | zoom-in-top-transition | zoom-in-bottom-transition | zoom-in-center-transition | zoom-in-left-transition | zoom-in-right-transition
     * @default zoom-in-center-transition
     * @name transition
     */
    transition: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    visible: boolean;
}, {
    classes(): Classes;
}, {
    show(): void;
    hide(): void;
    onClickOutside(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Determines if the modal should close when pressing escape
     * @type Boolean
     * @default true
     * @name closeOnPressEscape
     */
    closeOnPressEscape: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The aria-label attribute of the close button
     * @type String
     * @default Close
     * @name closeAriaLabel
     */
    closeAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The color variant of the modal
     * @type primary | success | light | dark | info | success | warning | danger
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the modal
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Determines if the modal should close when clicking the overlay
     * @type Boolean
     * @default true
     * @name hideOnClickOutside
     */
    hideOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The identifier of the modal
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: StringConstructor;
        default(): string;
    };
    /**
     * Determines if the close icon should be visible in the modal header
     * @type Boolean
     * @default false
     * @name showClose
     */
    showClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the modal
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
    /**
     * Used to determine if modal is visible or not
     * @type Boolean
     * @default false
     * @name modelValue
     */
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The modal opening and closing animation
     * @type fade-in-transition | fade-in-linear-transition | zoom-in-top-transition | zoom-in-bottom-transition | zoom-in-center-transition | zoom-in-left-transition | zoom-in-right-transition
     * @default zoom-in-center-transition
     * @name transition
     */
    transition: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string;
    name: string;
    modelValue: boolean;
    disabled: boolean;
    closeOnPressEscape: boolean;
    closeAriaLabel: string;
    hideOnClickOutside: boolean;
    showClose: boolean;
    transition: string;
}>;
export default _default;
