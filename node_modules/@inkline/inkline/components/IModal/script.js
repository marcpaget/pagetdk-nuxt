"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;
var _vue = require("vue");
var _helpers = require("@inkline/inkline/helpers");
var _controllers = require("@inkline/inkline/controllers");
var _mixins = require("@inkline/inkline/mixins");
var _directives = require("@inkline/inkline/directives");
const componentName = "IModal";
var _default = (0, _vue.defineComponent)({
  name: componentName,
  directives: {
    ClickOutside: _directives.ClickOutside
  },
  inheritAttrs: false,
  props: {
    /**
     * Determines if the modal should close when pressing escape
     * @type Boolean
     * @default true
     * @name closeOnPressEscape
     */
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    /**
     * The aria-label attribute of the close button
     * @type String
     * @default Close
     * @name closeAriaLabel
     */
    closeAriaLabel: {
      type: String,
      default: "Close"
    },
    /**
     * The color variant of the modal
     * @type primary | success | light | dark | info | success | warning | danger
     * @default light
     * @name color
     */
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    /**
     * The disabled state of the modal
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
      type: Boolean,
      default: false
    },
    /**
     * Determines if the modal should close when clicking the overlay
     * @type Boolean
     * @default true
     * @name hideOnClickOutside
     */
    hideOnClickOutside: {
      type: Boolean,
      default: true
    },
    /**
     * The identifier of the modal
     * @type String
     * @default uid()
     * @name name
     */
    name: {
      type: String,
      default() {
        return (0, _helpers.uid)("modal");
      }
    },
    /**
     * Determines if the close icon should be visible in the modal header
     * @type Boolean
     * @default false
     * @name showClose
     */
    showClose: {
      type: Boolean,
      default: true
    },
    /**
     * The size variant of the modal
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    /**
     * Used to determine if modal is visible or not
     * @type Boolean
     * @default false
     * @name modelValue
     */
    modelValue: {
      type: Boolean,
      default: false
    },
    /**
     * The modal opening and closing animation
     * @type fade-in-transition | fade-in-linear-transition | zoom-in-top-transition | zoom-in-bottom-transition | zoom-in-center-transition | zoom-in-left-transition | zoom-in-right-transition
     * @default zoom-in-center-transition
     * @name transition
     */
    transition: {
      type: String,
      default: "zoom-in-center-transition"
    }
  },
  emits: [
  /**
   * Event emitted for setting the modelValue
   * @event update:modelValue
   */
  "update:modelValue"],
  data() {
    return {
      visible: this.modelValue
    };
  },
  computed: {
    classes() {
      return {
        "-disabled": this.disabled,
        ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }
  },
  watch: {
    modelValue(value) {
      if (value) {
        this.show();
      } else {
        this.hide();
      }
    }
  },
  mounted() {
    _controllers.OverlayController.register(this);
  },
  unmounted() {
    _controllers.OverlayController.unregister(this);
  },
  methods: {
    show() {
      if (this.disabled) {
        return;
      }
      this.visible = true;
      this.$emit("update:modelValue", true);
      _controllers.OverlayController.open(this.name);
      if (typeof window !== "undefined") {
        (0, _helpers.addClass)(window.document.body, "-modal");
      }
    },
    hide() {
      if (this.disabled) {
        return;
      }
      this.visible = false;
      this.$emit("update:modelValue", false);
      _controllers.OverlayController.close(this.name);
      if (typeof window !== "undefined") {
        (0, _helpers.removeClass)(window.document.body, "-modal");
      }
    },
    onClickOutside() {
      if (!this.hideOnClickOutside) {
        return;
      }
      this.hide();
    }
  }
});
module.exports = _default;