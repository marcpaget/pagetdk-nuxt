declare const _default: import("vue").DefineComponent<{
    /**
     * The color variant of the radio
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the radio
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The indeterminate state of the radio
     * @type Boolean
     * @default false
     * @name indeterminate
     */
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to set the radio value when used inside a radio group
     * @default ''
     * @name value
     */
    value: {
        default: string;
    };
    /**
     * Used to set the radio value when used by itself
     * @default false
     * @name modelValue
     */
    modelValue: {
        default: boolean;
    };
    /**
     * The unique identifier of the radio
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default(): any;
    };
    /**
     * Displays the native browser radio input indicator
     * @type Boolean
     * @default false
     * @name native
     */
    native: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The readonly state of the radio
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the radio
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
    /**
     * The tabindex of the radio
     * @type Number | String
     * @default 0
     * @name tabindex
     */
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}, unknown, unknown, {
    classes(): Classes;
    checked(): boolean;
    tabIndex(): number | string;
}, {
    clickInputRef(): void;
    onChange(event: InputElementEvent): void;
    onBlur(event: InputElementEvent): void;
}, any, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The color variant of the radio
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the radio
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The indeterminate state of the radio
     * @type Boolean
     * @default false
     * @name indeterminate
     */
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to set the radio value when used inside a radio group
     * @default ''
     * @name value
     */
    value: {
        default: string;
    };
    /**
     * Used to set the radio value when used by itself
     * @default false
     * @name modelValue
     */
    modelValue: {
        default: boolean;
    };
    /**
     * The unique identifier of the radio
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default(): any;
    };
    /**
     * Displays the native browser radio input indicator
     * @type Boolean
     * @default false
     * @name native
     */
    native: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The readonly state of the radio
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the radio
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
    /**
     * The tabindex of the radio
     * @type Number | String
     * @default 0
     * @name tabindex
     */
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string;
    value: string;
    name: string | number;
    modelValue: boolean;
    disabled: boolean;
    indeterminate: boolean;
    native: boolean;
    readonly: boolean;
    tabindex: string | number;
}>;
export default _default;
