declare const _default: import("vue").DefineComponent<{
    /**
     * The aria-label of the pagination
     * @type String
     * @default Pagination
     * @name ariaLabel
     */
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The color variant of the pagination
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The number of items per page to be displayed
     * @type Number
     * @default 20
     * @name itemsPerPage
     */
    itemsPerPage: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The total number of items
     * @type Number
     * @default 0
     * @name itemsTotal
     */
    itemsTotal: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The maximum number of pagination buttons to show on each breakpoint
     * @type Number | Object
     * @name limit
     * @default { xs: 3, sm: 5 }
     */
    limit: {
        type: (ObjectConstructor | NumberConstructor)[];
        default(): {
            [key: string]: number;
        };
    };
    /**
     * Display the quick link buttons
     * @type Boolean
     * @default false
     * @name quickLink
     */
    quickLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to determine the current page
     * @type Number
     * @default 1
     * @name modelValue
     */
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The size variant of the pagination
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}, unknown, {
    pageLimit: number;
}, {
    classes(): Classes;
    pageCount(): number;
    showQuickPrevious(): boolean;
    showQuickNext(): boolean;
    pages(): number[];
}, {
    next(): void;
    quickNext(): void;
    previous(): void;
    quickPrevious(): void;
    onClick(item: number): void;
    onWindowResize(): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The aria-label of the pagination
     * @type String
     * @default Pagination
     * @name ariaLabel
     */
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The color variant of the pagination
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The number of items per page to be displayed
     * @type Number
     * @default 20
     * @name itemsPerPage
     */
    itemsPerPage: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The total number of items
     * @type Number
     * @default 0
     * @name itemsTotal
     */
    itemsTotal: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The maximum number of pagination buttons to show on each breakpoint
     * @type Number | Object
     * @name limit
     * @default { xs: 3, sm: 5 }
     */
    limit: {
        type: (ObjectConstructor | NumberConstructor)[];
        default(): {
            [key: string]: number;
        };
    };
    /**
     * Display the quick link buttons
     * @type Boolean
     * @default false
     * @name quickLink
     */
    quickLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to determine the current page
     * @type Number
     * @default 1
     * @name modelValue
     */
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The size variant of the pagination
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string;
    modelValue: number;
    ariaLabel: string;
    itemsPerPage: number;
    itemsTotal: number;
    limit: number | Record<string, any>;
    quickLink: boolean;
}>;
export default _default;
