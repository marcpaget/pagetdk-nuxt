declare const _default: import("vue").DefineComponent<{
    /**
     * The color variant of the tooltip
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the tooltip
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to manually control the visibility of the tooltip
     * @type Boolean
     * @default false
     * @name modelValue
     */
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The identifier of the tooltip
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: StringConstructor;
        default(): string;
    };
    /**
     * Displays an arrow on the tooltip pointing to the trigger element
     * @type Boolean
     * @default true
     * @name arrow
     */
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The placement of the tooltip
     * @type top | top-start | top-end | bottom | bottom-start | bottom-end | left | left-start | left-end | right | right-start | right-end
     * @default false
     * @name placement
     */
    placement: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The events used to trigger the tooltip
     * @type hover | focus | click | manual
     * @default [hover, focus]
     * @name trigger
     */
    trigger: {
        type: (ArrayConstructor | StringConstructor)[];
        default: () => string[];
    };
    /**
     * The offset of the tooltip relative to the trigger element
     * @type Number
     * @default 6
     * @name offset
     */
    offset: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Determines whether hover state should be transferred from trigger to popup
     * @type Boolean
     * @default false
     * @name interactable
     */
    interactable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to override the popper.js options used for creating the tooltip
     * @type Object
     * @default {}
     * @name popperOptions
     */
    popperOptions: {
        type: ObjectConstructor;
        default: () => any;
    };
    /**
     * The size variant of the tooltip
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}, unknown, unknown, {
    classes(): Classes;
}, {
    onEscape(): void;
    handleClickOutside(event: MouseEvent): void;
}, any, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click-outside")[], "update:modelValue" | "click-outside", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The color variant of the tooltip
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The disabled state of the tooltip
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to manually control the visibility of the tooltip
     * @type Boolean
     * @default false
     * @name modelValue
     */
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The identifier of the tooltip
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: StringConstructor;
        default(): string;
    };
    /**
     * Displays an arrow on the tooltip pointing to the trigger element
     * @type Boolean
     * @default true
     * @name arrow
     */
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The placement of the tooltip
     * @type top | top-start | top-end | bottom | bottom-start | bottom-end | left | left-start | left-end | right | right-start | right-end
     * @default false
     * @name placement
     */
    placement: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The events used to trigger the tooltip
     * @type hover | focus | click | manual
     * @default [hover, focus]
     * @name trigger
     */
    trigger: {
        type: (ArrayConstructor | StringConstructor)[];
        default: () => string[];
    };
    /**
     * The offset of the tooltip relative to the trigger element
     * @type Number
     * @default 6
     * @name offset
     */
    offset: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Determines whether hover state should be transferred from trigger to popup
     * @type Boolean
     * @default false
     * @name interactable
     */
    interactable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Used to override the popper.js options used for creating the tooltip
     * @type Object
     * @default {}
     * @name popperOptions
     */
    popperOptions: {
        type: ObjectConstructor;
        default: () => any;
    };
    /**
     * The size variant of the tooltip
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick-outside"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string;
    name: string;
    modelValue: boolean;
    disabled: boolean;
    trigger: string | unknown[];
    interactable: boolean;
    offset: number;
    placement: string;
    popperOptions: Record<string, any>;
    arrow: boolean;
}>;
export default _default;
