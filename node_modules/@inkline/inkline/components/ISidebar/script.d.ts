declare const _default: import("vue").DefineComponent<{
    /**
     * The aria-label of the sidebar
     * @type String
     * @default Sidebar
     * @name ariaLabel
     */
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Determines if the sidebar should close when clicking a sidebar item
     * @type Boolean
     * @default true
     * @name collapseOnItemClick
     */
    collapseOnItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Determines if the sidebar should close when clicking outside, on the overlay
     * @type Boolean
     * @default true
     * @name collapseOnClickOutside
     */
    collapseOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The collapse position of the sidebar
     * @type fixed | absolute | relative
     * @default absolute
     * @name collapsePosition
     */
    collapsePosition: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The color variant of the sidebar
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The placement of the sidebar
     * @type left | right
     * @default left
     * @name placement
     */
    placement: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The size variant of the navbar
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}, unknown, unknown, {
    classes(): Classes;
    sidebarWrapperTransition(): string;
    sidebarTransition(): string;
}, {
    onItemClick(): void;
    onOverlayClick(): void;
}, any, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The aria-label of the sidebar
     * @type String
     * @default Sidebar
     * @name ariaLabel
     */
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Determines if the sidebar should close when clicking a sidebar item
     * @type Boolean
     * @default true
     * @name collapseOnItemClick
     */
    collapseOnItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Determines if the sidebar should close when clicking outside, on the overlay
     * @type Boolean
     * @default true
     * @name collapseOnClickOutside
     */
    collapseOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The collapse position of the sidebar
     * @type fixed | absolute | relative
     * @default absolute
     * @name collapsePosition
     */
    collapsePosition: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The color variant of the sidebar
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * The placement of the sidebar
     * @type left | right
     * @default left
     * @name placement
     */
    placement: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The size variant of the navbar
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string;
    placement: string;
    ariaLabel: string;
    collapseOnItemClick: boolean;
    collapseOnClickOutside: boolean;
    collapsePosition: string;
}>;
export default _default;
