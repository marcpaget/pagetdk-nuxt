"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;
var _vue = require("vue");
var _mixins = require("@inkline/inkline/mixins");
const componentName = "ICollapsible";
var _default = (0, _vue.defineComponent)({
  name: componentName,
  provide() {
    return {
      collapsible: this
    };
  },
  inheritAttrs: false,
  props: {
    /**
     * Display the collapsible as an accordion, keeping a maximum of one open collapsible item
     * @type Boolean
     * @default false
     * @name accordion
     */
    accordion: {
      type: Boolean,
      default: false
    },
    /**
     * The color variant of the button
     * @type light | dark | blank
     * @default light
     * @name color
     */
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    /**
     * The size variant of the collapsible
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    /**
     * Used to determine which collapsible item is open
     * @type String[]
     * @default
     * @name modelValue
     */
    modelValue: {
      type: Array,
      default: () => []
    }
  },
  emits: [
  /**
   * Event emitted for setting the modelValue
   * @event update:modelValue
   */
  "update:modelValue"],
  data() {
    return {
      activeItems: [].concat(this.modelValue)
    };
  },
  computed: {
    classes() {
      return {
        ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }
  },
  watch: {
    modelValue(value) {
      this.activeItems = [].concat(value);
    }
  },
  methods: {
    onItemClick(item) {
      if (this.accordion) {
        this.activeItems = this.activeItems.indexOf(item.name) > -1 ? [] : [item.name];
        return this.activeItems;
      }
      const index = this.activeItems.indexOf(item.name);
      if (index > -1) {
        this.activeItems.splice(index, 1);
      } else {
        this.activeItems.push(item.name);
      }
      this.$emit("update:modelValue", this.activeItems);
    }
  }
});
module.exports = _default;