declare const _default: import("vue").DefineComponent<{
    /**
     * The color variant of the input
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Display the input as clearable
     * @type Boolean
     * @default false
     * @name clearable
     */
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The disabled state of the input
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The id of the internal input element
     * @type String
     * @default
     * @name id
     */
    id: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Used to set the field value
     * @type String | Number
     * @default
     * @name modelValue
     */
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    /**
     * The unique identifier of the input
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default(): string;
    };
    /**
     * The readonly state of the input
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the input
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
    /**
     * The tabindex of the input
     * @type Number | String
     * @default 0
     * @name tabindex
     */
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The minimum allowed input value
     * @type Number
     * @default -Infinity
     * @name min
     */
    min: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The maximum allowed input value
     * @type Number
     * @default +Infinity
     * @name max
     */
    max: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The precision of the input value, for floating point numbers
     * @type Number
     * @default 0
     * @name precision
     */
    precision: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The increment step to increase or decrease the value by
     * @type Number
     * @default 1
     * @name step
     */
    step: {
        type: NumberConstructor;
        default: number;
    };
}, unknown, unknown, {}, {
    decrease(): void;
    increase(): void;
    formatPrecision(value: string): string;
    onBlurFormatPrecision(event: InputElementEvent): void;
}, import("vue").ComponentOptionsMixin, any, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The color variant of the input
     * @type light | dark
     * @default light
     * @name color
     */
    color: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Display the input as clearable
     * @type Boolean
     * @default false
     * @name clearable
     */
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The disabled state of the input
     * @type Boolean
     * @default false
     * @name disabled
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The id of the internal input element
     * @type String
     * @default
     * @name id
     */
    id: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Used to set the field value
     * @type String | Number
     * @default
     * @name modelValue
     */
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    /**
     * The unique identifier of the input
     * @type String
     * @default uid()
     * @name name
     */
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default(): string;
    };
    /**
     * The readonly state of the input
     * @type Boolean
     * @default false
     * @name readonly
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The size variant of the input
     * @type sm | md | lg
     * @default md
     * @name size
     */
    size: {
        type: StringConstructor;
        default: any;
        validator: any;
    };
    /**
     * The tabindex of the input
     * @type Number | String
     * @default 0
     * @name tabindex
     */
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The minimum allowed input value
     * @type Number
     * @default -Infinity
     * @name min
     */
    min: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The maximum allowed input value
     * @type Number
     * @default +Infinity
     * @name max
     */
    max: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    /**
     * The precision of the input value, for floating point numbers
     * @type Number
     * @default 0
     * @name precision
     */
    precision: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The increment step to increase or decrease the value by
     * @type Number
     * @default 1
     * @name step
     */
    step: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string;
    name: string | number;
    id: string;
    modelValue: string | number;
    disabled: boolean;
    max: string | number;
    min: string | number;
    readonly: boolean;
    tabindex: string | number;
    clearable: boolean;
    precision: number;
    step: number;
}>;
export default _default;
