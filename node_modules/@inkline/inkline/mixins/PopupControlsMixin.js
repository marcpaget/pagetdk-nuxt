"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;
var _vue = require("vue");
var _helpers = require("@inkline/inkline/helpers");
var _default = (0, _vue.defineComponent)({
  props: {
    disabled: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: Boolean,
      default: void 0
    },
    trigger: {
      type: Array,
      default: () => ["hover", "click", "focus"]
    },
    interactable: {
      type: Boolean,
      default: true
    },
    hoverHideDelay: {
      type: Number,
      default: 300
    }
  },
  emits: ["update:modelValue", "click-outside"],
  data() {
    return {
      visible: this.modelValue,
      triggerStack: 0,
      hoverHideTransition: false
    };
  },
  watch: {
    modelValue(value) {
      if (value) {
        this.show();
      } else {
        this.hide();
      }
    }
  },
  mounted() {
    if (!this.$slots.default) {
      throw new Error("Popup components require one child element to be used as trigger.");
    }
    this.addEventListeners();
  },
  beforeUnmount() {
    this.removeEventListeners();
  },
  methods: {
    show() {
      if (this.disabled || this.visible) {
        return;
      }
      this.triggerStack += 1;
      this.visible = true;
      this.createPopper();
      this.$emit("update:modelValue", true);
    },
    hide() {
      if (this.disabled || !this.visible) {
        return;
      }
      this.triggerStack -= 1;
      if (this.triggerStack <= 0) {
        this.triggerStack = 0;
        this.visible = false;
        this.$emit("update:modelValue", false);
      }
    },
    hoverShow() {
      this.hoverHideTransition = false;
      this.show();
    },
    hoverHide() {
      this.hoverHideTransition = true;
      setTimeout(() => {
        if (this.hoverHideTransition) {
          this.hide();
        }
      }, this.hoverHideDelay);
    },
    onClick() {
      if (this.visible) {
        this.hide();
      } else {
        this.show();
      }
    },
    onClickOutside(event) {
      if (this.visible) {
        this.$emit("click-outside", event);
      }
      if (this.modelValue) return;
      this.hide();
    },
    addEventListeners() {
      [].concat(this.trigger).forEach(trigger => {
        switch (trigger) {
          case "hover":
            (0, _helpers.on)(this.$refs.trigger, "mouseenter", this.interactable ? this.hoverShow : this.show);
            (0, _helpers.on)(this.$refs.trigger, "mouseleave", this.interactable ? this.hoverHide : this.hide);
            if (this.interactable) {
              (0, _helpers.on)(this.$refs.popup, "mouseenter", this.hoverShow);
              (0, _helpers.on)(this.$refs.popup, "mouseleave", this.hoverHide);
            }
            break;
          case "click":
            (0, _helpers.on)(this.$refs.trigger, "click", this.onClick);
            break;
          case "focus":
            for (const child of this.$refs.trigger.children) {
              (0, _helpers.on)(child, "focus", this.show);
              (0, _helpers.on)(child, "blur", this.hide);
            }
            break;
          default:
            break;
        }
      });
    },
    removeEventListeners() {
      [].concat(this.trigger).forEach(trigger => {
        switch (trigger) {
          case "hover":
            (0, _helpers.off)(this.$refs.trigger, "mouseenter", this.interactable ? this.hoverShow : this.show);
            (0, _helpers.off)(this.$refs.trigger, "mouseleave", this.interactable ? this.hoverHide : this.hide);
            if (this.interactable) {
              (0, _helpers.off)(this.$refs.popup, "mouseenter", this.hoverShow);
              (0, _helpers.off)(this.$refs.popup, "mouseleave", this.hoverHide);
            }
            break;
          case "click":
            (0, _helpers.off)(this.$refs.trigger, "click", this.onClick);
            break;
          case "focus":
            for (const child of this.$refs.trigger.children) {
              (0, _helpers.off)(child, "focus", this.show);
              (0, _helpers.off)(child, "blur", this.hide);
            }
            break;
          default:
            break;
        }
      });
    },
    focusTrigger() {
      for (const child of this.$refs.trigger.children) {
        if ((0, _helpers.focusFirstDescendant)(child)) {
          child.focus();
          break;
        }
      }
    }
  }
});
module.exports = _default;