"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;
var _vue = require("vue");
var _helpers = require("@inkline/inkline/helpers");
var _constants = require("@inkline/inkline/constants");
var _default = (0, _vue.defineComponent)({
  props: {
    collapse: {
      type: [String, Boolean],
      default: "md"
    },
    modelValue: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  data() {
    return {
      open: this.modelValue,
      windowWidth: typeof window !== "undefined" ? window.innerWidth : 0
    };
  },
  computed: {
    collapsibleClasses() {
      return {
        "-open": this.open,
        "-collapsible": this.collapsible,
        [`-collapse-${this.collapse}`]: Boolean(this.collapse)
      };
    },
    collapsible() {
      if (this.collapse === true || this.collapse === false) {
        return this.collapse;
      }
      return this.windowWidth <= _constants.breakpoints[this.collapse][1];
    }
  },
  watch: {
    modelValue(value) {
      this.open = value;
    }
  },
  created() {
    if (typeof window !== "undefined") {
      (0, _helpers.on)(window, "resize", this.onWindowResize);
      this.onWindowResize();
    }
  },
  beforeUnmount() {
    if (typeof window !== "undefined") {
      (0, _helpers.off)(window, "resize", this.onWindowResize);
    }
  },
  methods: {
    setOpen(value) {
      this.open = value;
      this.$emit("update:modelValue", this.open);
    },
    toggleOpen() {
      this.open = !this.open;
      this.$emit("update:modelValue", this.open);
    },
    onWindowResize() {
      if (this.collapse === true || this.collapse === false || typeof window === "undefined") {
        return;
      }
      const windowWidth = window.innerWidth;
      if (this.windowWidth <= _constants.breakpoints[this.collapse][1] && windowWidth > _constants.breakpoints[this.collapse][1]) {
        this.setOpen(false);
      }
      this.windowWidth = window.innerWidth;
    }
  }
});
module.exports = _default;