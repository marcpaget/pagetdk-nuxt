"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBaseModifiers = exports.sameWidthModifier = exports.preventOverflowModifier = exports.offsetModifier = exports.default = exports.computeStylesModifier = exports.arrowModifier = void 0;
var _vue = require("vue");
var _core = require("@popperjs/core");
const offsetModifier = offset => ({
  name: "offset",
  options: {
    offset: [0, offset]
  }
});
exports.offsetModifier = offsetModifier;
const arrowModifier = () => ({
  name: "arrow",
  options: {
    padding: 6
    // padding from the edges of the popper
  }
});
exports.arrowModifier = arrowModifier;
const preventOverflowModifier = () => ({
  name: "preventOverflow",
  options: {
    padding: 8
    // padding from the edges of the viewport
  }
});
exports.preventOverflowModifier = preventOverflowModifier;
const computeStylesModifier = () => ({
  name: "computeStyles",
  options: {
    gpuAcceleration: false,
    adaptive: false
    // true by default
  }
});
exports.computeStylesModifier = computeStylesModifier;
const sameWidthModifier = () => ({
  name: "sameWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({
    state
  }) => {
    state.styles.popper.width = `${state.rects.reference.width}px`;
  },
  effect({
    state
  }) {
    state.elements.popper.style.width = `${state.elements.reference.offsetWidth}px`;
  }
});
exports.sameWidthModifier = sameWidthModifier;
const useBaseModifiers = ({
  offset
}) => [offsetModifier(offset), arrowModifier(), preventOverflowModifier(), computeStylesModifier()];
exports.useBaseModifiers = useBaseModifiers;
var _default = (0, _vue.defineComponent)({
  props: {
    placement: {
      type: String,
      default: "auto"
    },
    offset: {
      type: Number,
      default: 6
    },
    popperOptions: {
      type: Object,
      default: () => ({})
    }
  },
  data() {
    return {
      popperInstance: void 0
    };
  },
  watch: {
    placement(placement) {
      if (this.popperInstance) {
        this.popperInstance.setOptions({
          placement
        });
      }
    }
  },
  beforeUnmount() {
    this.destroyPopper();
  },
  methods: {
    createPopper() {
      if (typeof window === "undefined") {
        return;
      }
      const modifiers = useBaseModifiers({
        offset: this.offset
      });
      this.popperInstance = (0, _core.createPopper)(this.$refs.wrapper, this.$refs.popup, {
        strategy: "fixed",
        placement: this.placement,
        modifiers,
        ...this.popperOptions
      });
    },
    destroyPopper() {
      if (this.popperInstance) {
        this.popperInstance.destroy();
        this.popperInstance = void 0;
      }
    }
  }
});
module.exports = _default;