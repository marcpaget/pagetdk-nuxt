import { validators } from "./validators/index.mjs";
import { reservedValidationFields } from "@inkline/inkline/constants";
import { translate } from "@inkline/inkline/i18n";
export function validateFormInput(schema, path = "") {
  const errors = [];
  schema.valid = (schema.validators || []).reduce((acc, rawValidator) => {
    const validator = typeof rawValidator === "string" ? { name: rawValidator } : rawValidator;
    const valid = validators[validator.name](schema.value, validator);
    if (!valid) {
      const { name, message, ...params } = validator;
      const i18nParams = {
        name: path.split(".").pop(),
        value: schema.value,
        ...params
      };
      const errorMessage = (message instanceof Function ? message() : message) || translate(`validation.${name}`, i18nParams);
      errors.push({ name, message: errorMessage, path });
    }
    return acc && valid;
  }, true);
  schema.invalid = !schema.valid;
  schema.errors = errors;
  return schema;
}
export function validateFormGroup(schema, name = "") {
  schema.valid = Object.keys(schema).filter((key) => !reservedValidationFields.includes(key)).reduce((acc, key) => {
    if (Object.keys(schema[key]).length === 0 || schema[key].validators || schema[key].value) {
      schema[key] = validateFormInput(schema[key], `${name}` ? `${name}.${key}` : key);
    } else {
      schema[key] = validateFormGroup(schema[key], `${name}` ? `${name}.${key}` : key);
    }
    return acc && schema[key].valid;
  }, true);
  schema.invalid = !schema.valid;
  return schema;
}
export function validate(schema) {
  return validateFormGroup(schema, "");
}
