import { reactive, watch } from "vue";
import { addClass, removeClass } from "@inkline/inkline/helpers";
import { initialize as initializeForm } from "@inkline/inkline/validation";
import { setLocale } from "@inkline/inkline/i18n";
import * as inklineIcons from "@inkline/inkline/icons";
export const colorModeLocalStorageKey = "inkline-color-mode";
export const handleColorMode = (colorMode) => {
  let color;
  if (colorMode === "system") {
    color = matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  } else {
    color = colorMode;
  }
  removeClass(document.body, "-light -dark");
  addClass(document.body, `-${color}`);
};
export const defaultOptions = {
  components: {},
  icons: {},
  colorMode: "system",
  locale: "en",
  validateOn: ["input", "blur"],
  color: "",
  size: "",
  routerComponent: "router-link",
  componentOptions: {}
};
export function createPrototype({ icons, components, ...options }) {
  return {
    form(schema) {
      return initializeForm(schema);
    },
    setLocale(locale) {
      setLocale(locale);
    },
    options: reactive(options)
  };
}
export const inklineGlobals = {
  prototype: void 0,
  icons: void 0
};
export const Inkline = {
  install(app, options = {}) {
    const extendedOptions = {
      ...defaultOptions,
      ...options
    };
    for (const componentIndex in extendedOptions.components) {
      app.component(extendedOptions.components[componentIndex].name, extendedOptions.components[componentIndex]);
    }
    if (typeof window !== "undefined") {
      const storedColorMode = localStorage.getItem(colorModeLocalStorageKey);
      if (storedColorMode) {
        extendedOptions.colorMode = storedColorMode;
      }
    }
    const prototype = createPrototype(extendedOptions);
    inklineGlobals.prototype = prototype;
    app.config.globalProperties.$inkline = prototype;
    app.provide("inkline", prototype);
    const icons = {
      ...inklineIcons,
      ...extendedOptions.icons
    };
    app.provide("inklineIcons", icons);
    if (typeof window !== "undefined") {
      watch(() => prototype.options.colorMode, (colorMode) => {
        handleColorMode(colorMode);
        localStorage.setItem(colorModeLocalStorageKey, colorMode);
      });
      const onDarkModeMediaQueryChange = () => {
        if (prototype.options.colorMode === "system") {
          handleColorMode(prototype.options.colorMode);
        }
      };
      const darkModeMediaQuery = matchMedia("(prefers-color-scheme: dark)");
      if (darkModeMediaQuery.addEventListener) {
        darkModeMediaQuery.addEventListener("change", onDarkModeMediaQueryChange);
      } else {
        darkModeMediaQuery.addListener(onDarkModeMediaQueryChange);
      }
      addClass(document.body, "inkline");
      handleColorMode(extendedOptions.colorMode);
    }
  }
};
