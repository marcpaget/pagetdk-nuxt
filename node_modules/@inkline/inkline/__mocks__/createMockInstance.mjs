export const createMockInstance = (component, { inject = {}, data = {}, props = {}, computed = {}, methods = {}, mocks = {}, $el = document.createElement("div"), $refs = {} } = {}) => {
  const instance = {
    $emit: vi.fn(),
    $nextTick: vi.fn(() => Promise.resolve()),
    $el,
    $refs
  };
  if (component.props) {
    Object.entries(component.props).forEach(([key, prop]) => {
      instance[key] = props[key] ?? (typeof prop.default === "function" ? prop.default() : prop.default);
    });
  }
  if (component.methods) {
    Object.entries(component.methods).forEach(([key, fn]) => {
      instance[key] = vi.fn().mockImplementation(methods[key] || fn);
    });
  }
  if (component.data) {
    Object.entries(component.data.call(instance)).forEach(([key, value]) => {
      instance[key] = data[key] || value;
    });
  }
  if (component.inject) {
    Object.entries(component.inject).forEach(([key, value]) => {
      instance[key] = inject[key] || value?.default();
    });
  }
  if (component.computed) {
    Object.entries(component.computed).forEach(([key, fn]) => {
      Object.defineProperty(instance, key, {
        get: computed[key] || fn
      });
    });
  }
  Object.entries(mocks).forEach(([key, mock]) => {
    instance[key] = mock;
  });
  if (component.created) {
    component.created.call(instance);
  }
  if (component.mounted) {
    component.mounted.call(instance);
  }
  return instance;
};
