import { defu } from 'defu';
import { camelCase, pascalCase } from 'scule';
import { defineNuxtModule, useLogger, createResolver, addServerHandler, addImportsSources, addTemplate } from '@nuxt/kit';

const module = defineNuxtModule({
  meta: {
    name: "nuxt-api-party",
    configKey: "apiParty",
    compatibility: {
      nuxt: "^3"
    }
  },
  defaults: {
    endpoints: {},
    allowClient: false
  },
  setup(options, nuxt) {
    const logger = useLogger("nuxt-api-party");
    const getRawComposableName = (endpointId) => `$${camelCase(endpointId)}`;
    const getDataComposableName = (endpointId) => `use${pascalCase(endpointId)}Data`;
    if (Object.keys(options.endpoints).length === 0 && !nuxt.options.runtimeConfig.apiParty)
      logger.error("Missing any API endpoint configuration. Please set `apiParty` module options in `nuxt.config.ts`.");
    nuxt.options.runtimeConfig.apiParty = defu(
      nuxt.options.runtimeConfig.apiParty,
      options
    );
    const resolvedOptions = nuxt.options.runtimeConfig.apiParty;
    nuxt.options.runtimeConfig.public.apiParty = defu(
      nuxt.options.runtimeConfig.public.apiParty,
      resolvedOptions.allowClient ? resolvedOptions : {
        // Only expose cookies endpoint option to the client
        endpoints: Object.fromEntries(
          Object.entries(resolvedOptions.endpoints).map(
            ([endpointId, endpoint]) => [endpointId, { cookies: endpoint.cookies }]
          )
        ),
        allowClient: false
      }
    );
    const { resolve } = createResolver(import.meta.url);
    nuxt.options.build.transpile.push(resolve("runtime"));
    nuxt.hook("nitro:config", (config) => {
      config.externals = defu(config.externals, {
        inline: [
          resolve("runtime/utils"),
          resolve("runtime/formData")
        ]
      });
    });
    addServerHandler({
      route: "/api/__api_party/:endpointId",
      method: "post",
      handler: resolve("runtime/server")
    });
    const endpointKeys = Object.keys(resolvedOptions.endpoints);
    addImportsSources({
      from: "#build/api-party",
      imports: endpointKeys.flatMap((i) => [getRawComposableName(i), getDataComposableName(i)])
    });
    addTemplate({
      filename: "api-party.mjs",
      getContents() {
        return `
import { _$api } from '${resolve("runtime/composables/$api")}'
import { _useApiData } from '${resolve("runtime/composables/useApiData")}'
${endpointKeys.map((i) => `
export const ${getRawComposableName(i)} = (...args) => _$api('${i}', ...args)
export const ${getDataComposableName(i)} = (...args) => _useApiData('${i}', ...args)
`.trimStart()).join("")}`.trimStart();
      }
    });
    addTemplate({
      filename: "api-party.d.ts",
      getContents() {
        return `
import type { $Api } from '${resolve("runtime/composables/$api")}'
import type { UseApiData } from '${resolve("runtime/composables/useApiData")}'
${endpointKeys.map((i) => `
export declare const ${getRawComposableName(i)}: $Api
export declare const ${getDataComposableName(i)}: UseApiData
`.trimStart()).join("")}`.trimStart();
      }
    });
  }
});

export { module as default };
