import * as _nuxt_schema from '@nuxt/schema';
import { QueryObject } from 'ufo';

interface ModuleOptions {
    /**
     * API endpoints
     *
     * @remarks
     * Each key represents an endpoint ID, which is used to generate the composables. The value is an object with the following properties:
     * - `url`: The URL of the API endpoint
     * - `token`: The API token to use for the endpoint (optional)
     * - `query`: Query parameters to send with the each request (optional)
     * - `headers`: Headers to send with each request (optional)
     *
     * @example
     * export default defineNuxtConfig({
     *   apiParty: {
     *     endpoints: {
     *       jsonPlaceholder: {
     *         url: 'https://jsonplaceholder.typicode.com'
     *         headers: {
     *           Authorization: `Basic ${Buffer.from('foo:bar').toString('base64')}`
     *         }
     *       }
     *     }
     *   }
     * })
     *
     * @default {}
     */
    endpoints?: Record<string, {
        url: string;
        token?: string;
        query?: QueryObject;
        headers?: Record<string, string>;
    }>;
    /**
     * Allow client-side requests besides server-side ones
     *
     * @remarks
     * By default, API requests are only made on the server-side. This option allows you to make requests on the client-side as well. Keep in mind that this will expose your API credentials to the client.
     *
     * @example
     * useJsonPlaceholderData('/posts/1', { client: true })
     *
     * @default false
     */
    allowClient?: boolean;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { ModuleOptions, _default as default };
