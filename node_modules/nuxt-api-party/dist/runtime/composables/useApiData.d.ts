import type { FetchError } from 'ofetch';
import type { NitroFetchOptions } from 'nitropack';
import type { Ref } from 'vue';
import type { AsyncData, AsyncDataOptions } from 'nuxt/app';
import type { MaybeRefOrGetter } from '../utils';
type ComputedOptions<T extends Record<string, any>> = {
    [K in keyof T]: T[K] extends Function ? T[K] : T[K] extends Record<string, any> ? ComputedOptions<T[K]> | Ref<T[K]> | T[K] : Ref<T[K]> | T[K];
};
export type UseApiDataOptions<T> = AsyncDataOptions<T> & Pick<ComputedOptions<NitroFetchOptions<string>>, 'onRequest' | 'onRequestError' | 'onResponse' | 'onResponseError' | 'query' | 'headers' | 'method'> & {
    body?: string | Record<string, any> | FormData | null;
    /**
     * Skip the Nuxt server proxy and fetch directly from the API.
     * Requires `allowClient` to be enabled in the module options as well.
     * @default false
     */
    client?: boolean;
    /**
     * Cache the response for the same request
     * @default true
     */
    cache?: boolean;
};
export type UseApiData = <T = any>(path: MaybeRefOrGetter<string>, opts?: UseApiDataOptions<T>) => AsyncData<T, FetchError>;
export declare function _useApiData<T = any>(endpointId: string, path: MaybeRefOrGetter<string>, opts?: UseApiDataOptions<T>): AsyncData<T, FetchError<any>>;
export {};
