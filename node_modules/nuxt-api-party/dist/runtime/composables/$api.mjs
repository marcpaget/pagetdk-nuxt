import { hash } from "ohash";
import { headersToObject, serializeMaybeEncodedBody } from "../utils.mjs";
import { isFormData } from "../formData.mjs";
import { useNuxtApp, useRuntimeConfig } from "#imports";
export function _$api(endpointId, path, opts = {}) {
  const nuxt = useNuxtApp();
  const promiseMap = nuxt._promiseMap = nuxt._promiseMap || /* @__PURE__ */ new Map();
  const { query, headers, method, body, client = false, cache = false, ...fetchOptions } = opts;
  const { apiParty } = useRuntimeConfig().public;
  const key = `$party${hash([
    endpointId,
    path,
    query,
    method,
    ...isFormData(body) ? [] : [body]
  ])}`;
  if (client && !apiParty.allowClient)
    throw new Error('Client-side API requests are disabled. Set "allowClient: true" in the module options to enable them.');
  if ((nuxt.isHydrating || cache) && key in nuxt.payload.data)
    return Promise.resolve(nuxt.payload.data[key]);
  if (promiseMap.has(key))
    return promiseMap.get(key);
  const endpoints = apiParty.endpoints || {};
  const endpoint = endpoints[endpointId];
  const clientFetcher = () => globalThis.$fetch(path, {
    ...fetchOptions,
    baseURL: endpoint.url,
    method,
    query: {
      ...endpoint.query,
      ...query
    },
    headers: {
      ...endpoint.token && { Authorization: `Bearer ${endpoint.token}` },
      ...endpoint.headers,
      ...headersToObject(headers)
    },
    body
  });
  const serverFetcher = async () => await globalThis.$fetch(`/api/__api_party/${endpointId}`, {
    ...fetchOptions,
    method: "POST",
    body: {
      path,
      query,
      headers: headersToObject(headers),
      method,
      body: await serializeMaybeEncodedBody(body)
    }
  });
  const request = (client ? clientFetcher() : serverFetcher()).then((response) => {
    if (process.server || cache)
      nuxt.payload.data[key] = response;
    promiseMap.delete(key);
    return response;
  });
  promiseMap.set(key, request);
  return request;
}
