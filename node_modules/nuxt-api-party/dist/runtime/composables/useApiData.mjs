import { computed, reactive, unref } from "vue";
import { hash } from "ohash";
import { headersToObject, serializeMaybeEncodedBody, toValue } from "../utils.mjs";
import { isFormData } from "../formData.mjs";
import { useAsyncData, useRuntimeConfig } from "#imports";
export function _useApiData(endpointId, path, opts = {}) {
  const { apiParty } = useRuntimeConfig().public;
  const _path = computed(() => toValue(path));
  const {
    server,
    lazy,
    default: defaultFn,
    transform,
    pick,
    watch,
    immediate,
    query,
    headers,
    method,
    body,
    client = false,
    cache = true,
    ...fetchOptions
  } = opts;
  if (client && !apiParty.allowClient)
    throw new Error('Client-side API requests are disabled. Set "allowClient: true" in the module options to enable them.');
  const endpoints = apiParty.endpoints || {};
  const endpoint = endpoints[endpointId];
  const _fetchOptions = reactive(fetchOptions);
  const _endpointFetchOptions = reactive({
    path: _path,
    query,
    headers: computed(() => headersToObject(unref(headers))),
    method
  });
  const _asyncDataOptions = {
    server,
    lazy,
    default: defaultFn,
    transform,
    pick,
    watch: [
      _endpointFetchOptions,
      ...watch || []
    ],
    immediate
  };
  let controller;
  const key = computed(() => `$party${hash([
    endpointId,
    _path.value,
    unref(query),
    unref(method),
    ...isFormData(body) ? [] : [body]
  ])}`);
  return useAsyncData(
    key.value,
    async (nuxt) => {
      controller?.abort?.();
      if ((nuxt.isHydrating || cache) && key.value in nuxt.payload.data)
        return nuxt.payload.data[key.value];
      controller = typeof AbortController !== "undefined" ? new AbortController() : {};
      let result;
      if (client) {
        result = await globalThis.$fetch(_path.value, {
          ..._fetchOptions,
          baseURL: endpoint.url,
          method: _endpointFetchOptions.method,
          query: {
            ...endpoint.query,
            ..._endpointFetchOptions.query
          },
          headers: {
            ...endpoint.token && { Authorization: `Bearer ${endpoint.token}` },
            ...endpoint.headers,
            ..._endpointFetchOptions.headers
          },
          body
        });
      } else {
        result = await globalThis.$fetch(
          `/api/__api_party/${endpointId}`,
          {
            ..._fetchOptions,
            signal: controller.signal,
            method: "POST",
            body: {
              ..._endpointFetchOptions,
              body: await serializeMaybeEncodedBody(body)
            }
          }
        );
      }
      if (cache)
        nuxt.payload.data[key.value] = result;
      return result;
    },
    _asyncDataOptions
  );
}
