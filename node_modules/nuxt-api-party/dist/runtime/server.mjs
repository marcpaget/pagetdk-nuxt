import { createError, defineEventHandler, getRouterParams, readBody } from "h3";
import destr from "destr";
import { deserializeMaybeEncodedBody } from "./utils.mjs";
import { useRuntimeConfig } from "#imports";
export default defineEventHandler(async (event) => {
  const { endpointId } = getRouterParams(event);
  const { apiParty } = useRuntimeConfig();
  const endpoints = apiParty.endpoints;
  const endpoint = endpoints[endpointId];
  if (!endpoint) {
    throw createError({
      statusCode: 404,
      statusMessage: `Unknown API endpoint "${endpointId}"`
    });
  }
  let _body = await readBody(event);
  if (Buffer.isBuffer(_body))
    _body = destr(_body.toString());
  const {
    path,
    query,
    headers,
    body,
    ...fetchOptions
  } = _body;
  try {
    return await $fetch(
      path,
      {
        ...fetchOptions,
        baseURL: endpoint.url,
        query: {
          ...endpoint.query,
          ...query
        },
        headers: {
          ...endpoint.token && { Authorization: `Bearer ${endpoint.token}` },
          ...endpoint.headers,
          ...headers
        },
        ...body && { body: await deserializeMaybeEncodedBody(body) }
      }
    );
  } catch (err) {
    throw createError(err);
  }
});
