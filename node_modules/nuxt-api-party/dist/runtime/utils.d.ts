import type { NitroFetchOptions } from 'nitropack';
import type { ComputedRef, Ref } from 'vue';
import type { NuxtApp } from 'nuxt/app';
import type { ApiFetchOptions } from './composables/$api';
export type EndpointFetchOptions = NitroFetchOptions<string> & {
    path: string;
};
export type MaybeRef<T> = T | Ref<T>;
export type MaybeComputedRef<T> = MaybeReadonlyRef<T> | MaybeRef<T>;
export type MaybeReadonlyRef<T> = (() => T) | ComputedRef<T>;
export declare function resolveUnref<T>(r: MaybeComputedRef<T>): T;
export declare function getFetchHandler(nuxt: NuxtApp, { localFetch }?: {
    localFetch?: boolean | undefined;
}): typeof global.$fetch;
export declare function headersToObject(headers?: HeadersInit): Record<string, string>;
export declare function serializeMaybeEncodedBody(value: ApiFetchOptions['body']): Promise<string | Record<string, any> | null | undefined>;
export declare function deserializeMaybeEncodedBody(value: ApiFetchOptions['body']): Promise<string | Record<string, any> | null | undefined>;
