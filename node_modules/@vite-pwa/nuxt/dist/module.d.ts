import * as _nuxt_schema from '@nuxt/schema';
import { VitePWAOptions } from 'vite-plugin-pwa';
import { UnwrapNestedRefs, Ref } from 'vue';

interface PwaInjection {
    isInstalled: boolean;
    showInstallPrompt: Ref<boolean>;
    cancelInstall: () => void;
    install: () => Promise<void>;
    swActivated: Ref<boolean>;
    registrationError: Ref<boolean>;
    offlineReady: Ref<boolean>;
    needRefresh: Ref<boolean>;
    updateServiceWorker: (reloadPage?: boolean | undefined) => Promise<void>;
    cancelPrompt: () => Promise<void>;
    getSWRegistration: () => ServiceWorkerRegistration | undefined;
}
declare module '#app' {
    interface NuxtApp {
        $pwa: UnwrapNestedRefs<PwaInjection>;
    }
}
interface ClientOptions {
    /**
     * Exposes the plugin: defaults to true.
     */
    registerPlugin?: boolean;
    /**
     * Registers a periodic sync for updates interval: value in seconds.
     */
    periodicSyncForUpdates?: number;
    /**
     * Will prevent showing native PWA install prompt: defaults to false.
     *
     * When set to true or no empty string, the native PWA install prompt will be prevented.
     *
     * When set to a string, it will be used as the key in `localStorage` to prevent show the PWA install prompt widget.
     *
     * When set to true, the key used will be `vite-pwa:hide-install`.
     */
    installPrompt?: boolean | string;
}
interface ModuleOptions extends Partial<VitePWAOptions> {
    registerWebManifestInRouteRules?: boolean;
    /**
     * Writes the plugin to disk: defaults to false (debug).
     */
    writePlugin?: boolean;
    /**
     * Options for plugin.
     */
    client?: ClientOptions;
}

declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { ClientOptions, ModuleOptions, PwaInjection, _default as default };
