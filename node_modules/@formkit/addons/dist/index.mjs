import { isConditional, isDOM } from '@formkit/core';
import autoAnimate from '@formkit/auto-animate';
import { extend } from '@formkit/utils';

const pendingIds = new Map();
let observer = null;
/**
 * Create a new mutation observer that checks for the document for ids. We do
 * this instead of iterating over the mutations because getElementById is by far
 * the fastest way check for an element in the DOM, much faster that iterating
 * over the mutations themselves.
 */
function createObserver() {
    observeIds();
    observer = new MutationObserver(() => {
        observeIds();
        if (!pendingIds.size && observer) {
            observer.disconnect();
            observer = null;
        }
    });
    observer.observe(document, { childList: true, subtree: true });
}
function observeIds() {
    pendingIds.forEach((options, id) => {
        const outer = document.getElementById(id);
        if (outer) {
            pendingIds.delete(id);
            autoAnimate(outer, options || {});
        }
    });
}
/**
 * Adds auto-animate to each input automatically.
 * @param node - A formkit node
 * @public
 */
function createAutoAnimatePlugin(options) {
    return (node) => {
        node.on('created', () => {
            var _a;
            if (typeof ((_a = node.props.definition) === null || _a === void 0 ? void 0 : _a.schema) === 'function') {
                // add an outer wrapper id or get the current one
                const original = node.props.definition.schema;
                node.props.definition.schema = (extensions) => {
                    extensions.outer = extend({ attrs: { id: `outer-${node.props.id}` } }, extensions.outer || {});
                    const finalSchema = original(extensions);
                    const outermostSchema = isConditional(finalSchema[0])
                        ? Array.isArray(finalSchema[0].else)
                            ? finalSchema[0].else[0]
                            : finalSchema[0].else
                        : finalSchema[0];
                    if (outermostSchema && isDOM(outermostSchema) && outermostSchema.attrs && 'id' in outermostSchema.attrs) {
                        pendingIds.set(String(outermostSchema.attrs.id === '$id' ? node.props.id : outermostSchema.attrs.id), options || undefined);
                    }
                    return finalSchema;
                };
            }
            if (!observer)
                createObserver();
        });
    };
}

export { createAutoAnimatePlugin };
